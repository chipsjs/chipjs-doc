{
  "openapi": "3.0.0",
  "info": {
    "title": "august-rest-api",
    "description": "august api server for mobile",
    "termsOfService": "{base_url}",
    "version": "8.8.0"
  },
  "servers": [],
  "paths": {
    "/apidesc": {
      "get": {
        "summary": "Get this Document",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": []
    },
    "/users": {
      "get": {
        "summary": "Check existence of a user in the system",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [],
      "post": {
        "summary": "Creates a user account.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "description": "password for authentication",
                  "type": "string"
                },
                "FirstName": {
                  "description": "first name",
                  "type": "string"
                },
                "LastName": {
                  "description": "last name",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "password"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "UserID": {
                      "description": "unique identifier describing user",
                      "type": "string"
                    },
                    "ifPresent": {
                      "type": "object",
                      "properties": {
                        "UserName": {
                          "description": "username for use with login",
                          "type": "string"
                        },
                        "Email": {
                          "description": "email address",
                          "type": "string"
                        },
                        "PhoneNo": {
                          "description": "phone number",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Updates user information",
        "description": "Updates the information for callingUser with the information provided.  Can be used to update password, phone number, email address, first name, last name, or username.  If username, email, or phone number already exist in the system, an error will be returned.  Returns an authorization error if no session key is provided or if session has expired.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "anyOf": {
                  "type": "object",
                  "properties": {
                    "password": {
                      "description": "new password",
                      "type": "string"
                    },
                    "FirstName": {
                      "description": "first name",
                      "type": "string"
                    },
                    "LastName": {
                      "description": "last name",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "anyOf": {
                      "type": "object",
                      "properties": {
                        "password": {
                          "description": "new password",
                          "type": "string"
                        },
                        "FirstName": {
                          "description": "first name",
                          "type": "string"
                        },
                        "LastName": {
                          "description": "last name",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/checkExist": {
      "get": {
        "summary": "check email or phone for duplicates",
        "description": "it will return true or false to check if user is register and return detail msg after exists == false. request query are optional between email and phone, but will return 4xx err_code if query body is not one of these",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "description": "[optional] string: user email",
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "schema": {
              "description": "[optional] string: user phone number,standard format is E164",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "exists": {
                      "description": "boolean",
                      "type": "boolean"
                    },
                    "msg": {
                      "description": "string: detail message",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/users/:otherUserID": {
      "get": {
        "summary": "Get information on a user",
        "description": "`/users/me` will return information for calling (OAuth'd) user,whereas `/users/:userID` will return the information for the user specified by `:userID`.  Returns _Not Found_ if userID does not exist.\n\n* `locks` is a hash of `{lockID: \"User type (superuser|manager|user)\"}`\n* `houses` is a hash of `{houseID: \"User type (superuser|manager|user)}`\n\"",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "UserID": {
                      "description": "<server-generated unique user ID>",
                      "type": "string"
                    },
                    "ifPresent": {
                      "type": "object",
                      "properties": {
                        "UserName": {
                          "description": "<user name to log in to web page, etc.>",
                          "type": "string"
                        },
                        "Email": {
                          "description": "<email address>",
                          "type": "string"
                        },
                        "FirstName": {
                          "description": "<first name>",
                          "type": "string"
                        },
                        "LastName": {
                          "description": "<last name>",
                          "type": "string"
                        },
                        "PhoneNo": {
                          "description": "<phone number>",
                          "type": "string"
                        },
                        "Type": {
                          "description": "<user type>",
                          "type": "string"
                        },
                        "UpdateInterval": {
                          "description": "integer",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/houses/mine": {
      "get": {
        "summary": "Get a list of calling user's houses.",
        "description": "At least a house name is required.  The only error from this function is Bad Request when no house name is provided.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "HouseID": {
                        "description": "<house ID>",
                        "type": "string"
                      },
                      "HouseName": {
                        "description": "<house name>",
                        "type": "string"
                      },
                      "type": {
                        "description": "<user type for calling user>",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/houses/:houseID": {
      "get": {
        "summary": "Get information about an existing house",
        "description": "users is a hash of {userID: usertype (superuser|manager|user)}",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "HouseName": {
                      "description": "<Name of house>",
                      "type": "string"
                    },
                    "ifPresent": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "object",
                          "properties": {
                            "userid": {
                              "description": "type - type of user",
                              "type": "string"
                            },
                            "userid2": {
                              "description": "type - type of user",
                              "type": "string"
                            }
                          }
                        },
                        "locks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "l",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "c",
                                "type": "string"
                              },
                              "3": {
                                "description": "k",
                                "type": "string"
                              },
                              "4": {
                                "description": "i",
                                "type": "string"
                              },
                              "5": {
                                "description": "d",
                                "type": "string"
                              },
                              "6": {
                                "description": "1",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "removes a house",
        "description": "Returns 412 if the house still has locks",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "summary": "update a house",
        "description": "returns 404 if house not found, 403 if callingUser is not owner of house",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "HouseName": {
                  "description": "description: <Name of house (home, \"crash pad\", ...)",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "HouseName"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/users/locks/mine": {
      "get": {
        "summary": "Get list of calling user's locks",
        "description": "Returns an empty body if the calling user has no locks",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lockID1": {
                      "type": "object",
                      "properties": {
                        "LockName": {
                          "description": "name of lock",
                          "type": "string"
                        },
                        "UserType": {
                          "description": "<user type>",
                          "type": "string"
                        },
                        "macAddress": {
                          "description": "mac address of lock",
                          "type": "string"
                        },
                        "HouseID": {
                          "description": "ID of house to which lock belongs",
                          "type": "string"
                        },
                        "HouseName": {
                          "description": "Name of house to which lock belongs",
                          "type": "string"
                        }
                      }
                    },
                    "lockID2": {
                      "type": "object",
                      "properties": {
                        "LockName": {
                          "description": "name of lock",
                          "type": "string"
                        },
                        "UserType": {
                          "description": "<user type>",
                          "type": "string"
                        },
                        "macAddress": {
                          "description": "mac address of lock",
                          "type": "string"
                        },
                        "HouseID": {
                          "description": "ID of house to which lock belongs",
                          "type": "string"
                        },
                        "HouseName": {
                          "description": "Name of house to which lock belongs",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/users/doorbells/mine": {
      "get": {
        "summary": "Get list of calling user's doorbells",
        "description": "Returns an empty body if the calling user has no locks",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "doorbellID1": {
                      "type": "object",
                      "properties": {
                        "osVersionHistory": {
                          "type": "object",
                          "properties": {}
                        },
                        "bridgeAppVersionHistory": {
                          "type": "object",
                          "properties": {}
                        },
                        "doorbellAppVersionHistory": {
                          "type": "object",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/users/bridges/mine": {
      "get": {
        "summary": "Get list of calling user's bridges",
        "description": "Returns an empty body if the calling user has no bridges",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bridgeID1": {
                      "type": "object",
                      "properties": {
                        "locks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "l",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "c",
                                "type": "string"
                              },
                              "3": {
                                "description": "k",
                                "type": "string"
                              },
                              "4": {
                                "description": "I",
                                "type": "string"
                              },
                              "5": {
                                "description": "D",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "appID": {
                          "description": "august-iphone",
                          "type": "string"
                        },
                        "deviceModel": {
                          "description": "august-connect",
                          "type": "string"
                        },
                        "firmwareVersion": {
                          "description": "2.1.27",
                          "type": "string"
                        },
                        "operative": {
                          "description": "unknown",
                          "type": "unknown"
                        }
                      }
                    },
                    "bridgeID2": {
                      "type": "object",
                      "properties": {
                        "locks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "l",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "c",
                                "type": "string"
                              },
                              "3": {
                                "description": "k",
                                "type": "string"
                              },
                              "4": {
                                "description": "I",
                                "type": "string"
                              },
                              "5": {
                                "description": "D",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "appID": {
                          "description": "august-iphone",
                          "type": "string"
                        },
                        "deviceModel": {
                          "description": "august-connect",
                          "type": "string"
                        },
                        "firmwareVersion": {
                          "description": "2.1.27",
                          "type": "string"
                        },
                        "operative": {
                          "description": "unknown",
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/locks/:lockID": {
      "get": {
        "summary": "Get information about an existing lock",
        "description": "Returns `resource not found` if lockID does not exist and `not authorized` if the user is not a user of the lock.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "LockName": {
                      "description": "Text string",
                      "type": "string"
                    },
                    "Type": {
                      "description": "lock type",
                      "type": "string"
                    },
                    "Updated": {
                      "description": "date",
                      "type": "string"
                    },
                    "Created": {
                      "description": "date",
                      "type": "string"
                    },
                    "LockID": {
                      "description": "unique ID of lock",
                      "type": "string"
                    },
                    "HouseID": {
                      "description": "id of house to which lock belongs",
                      "type": "string"
                    },
                    "ifPresent": {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "object",
                          "properties": {
                            "userid": {
                              "description": "user type",
                              "type": "string"
                            },
                            "userid2": {
                              "description": "user type",
                              "type": "string"
                            },
                            "...": {
                              "description": "...",
                              "type": "string"
                            },
                            "useridN": {
                              "description": "user type",
                              "type": "string"
                            }
                          }
                        },
                        "ruleHash": {
                          "type": "object",
                          "properties": {
                            "ruleID": {
                              "type": "object",
                              "properties": {
                                "startTime": {
                                  "description": "start time in ISO 8601 format",
                                  "type": "string"
                                },
                                "duration": {
                                  "description": "duration",
                                  "type": "string"
                                },
                                "schedule": {
                                  "description": "Rule schedule in iCalendar data format (RFC 5545)",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "homeKitUniqueIdentifier": {
                      "description": "id of homeKit to which lock belongs to",
                      "type": "string"
                    },
                    "[hostLockInfo]": {
                      "description": "Information about the host lock",
                      "type": "string"
                    },
                    "[hostID]": {
                      "description": "Host lock's ID",
                      "type": "string"
                    },
                    "[hostHardwareLockInfo]": {
                      "description": "Information about the host hardware",
                      "type": "string"
                    },
                    "[hostHardwareID]": {
                      "description": "Host hardware's ID",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "put": {
        "summary": "Update a lock's information",
        "description": "Currently only Lock Name, their Calibration status, and their homeKit ID can be updated",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "anyOf": {
                  "type": "object",
                  "properties": {
                    "LockName": {
                      "description": "name of lock",
                      "type": "string"
                    },
                    "Calibrated": {
                      "description": "boolean. set to true if it's calibrated",
                      "type": "boolean"
                    },
                    "homeKitUniqueIdentifier": {
                      "description": "id of homeKit that's specific to the lock",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "LockName": {
                      "description": "<Text string>",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "deletes a lock from the system (factory reset)",
        "description": "Removes lock from all associations in the system.\n###Responses:\nCode | Reason \n---- | ------\n 403 | callingUser is not authorized to use lock\n 404 | lock not found\n",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/locks/adduser/:lockID/:otherUserID/:type": {
      "put": {
        "summary": "Give a user access to a lock",
        "description": "The only response to this function is a status code.  Returns Bad Request if lock does not exist, otherUser does not exist, or type is invalid.  Valid typs are \"user\" and \"manager\".  Returns Unauthorized if calling user is not a manager or superuser of lock",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "Name": {
                  "description": "string containing name of person to be granted access to lock",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "type",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/remoteoperate/:lockID/:command": {
      "put": {
        "summary": "operate a lock remotely through a bridge, if present",
        "description": "###Commands:\nValid commands are `lock`, `unlock`, `status`, `reboot`, `telemetry`, and `unlatch`.\n\nIf the calling user is not authorized to use the lock a this time, it returns Unauthorized.\n\n###Call Types:\nThis endpoint accepts a query string parameter \"type\". \nValid types are either \"sync\" or \"async\". If type is not provided the default is sync\nAn async request will return immediately and return the operation's result using a communications channel defined in the request's payload\n###Return values:\nStatus | message\n------ | -------\n 200 | resultObject\n 202 | accepted if the request asked for async processing\n 423 | \"lock in use\" if there is already a pending remote operation\n 500 | _errorMessage varies_ if there was an error communicating with the lock (check the message returned)\n 501 | \"not implemented\", if the command is not valid\n",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "the status of the lock at the end of the operation. One of: kAugLockState_Locked, kAugLockState_unlockedkAugLockState_Locked, kAugLockState_UnknownStaticPosition",
                      "type": "string"
                    },
                    "doorState": {
                      "description": "the door state status of the lockOne of: kAugDoorState_Init, kAugDoorState_Closed, kAugDoorState_Ajar, kAugDoorState_Open, kAugDoorState_Unknown",
                      "type": "string"
                    },
                    "info": {
                      "type": "object",
                      "properties": {
                        "action": {
                          "description": "requested action",
                          "type": "string"
                        },
                        "startTime": {
                          "description": "when the request was received by the remote bridge server",
                          "type": "string"
                        },
                        "duration": {
                          "description": "the duration in second of the full transaction between the remote bridge server and the bridge",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "command",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/remoteoperate/:lockID/transactions/:txid": {
      "delete": {
        "summary": "cancel a previous remote operation of a lock through a bridge",
        "description": "If the calling user is not authorized to use the lock a this time, it returns Unauthorized.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "txid",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/pins/sync": {
      "put": {
        "summary": "Allows a client to trigger remote sync process of PINs to a lock",
        "description": "return status codes: \n\nStatus | Meaning\n------ | -------\n 200 | Ok, but nothing to do. \n 202 | Synchronization will start soon. \n 409 | No bridge associated or the bridge is offline.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "channelID": {
                      "description": "string",
                      "type": "string"
                    },
                    "numRecords": {
                      "description": "string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/:otherUserID/:type": {
      "put": {
        "summary": "Sets otherUsers's type on lock specified by lockID managed by calling user.",
        "description": "This sets otherUser's user type to type for lock lockID. This can only be done if the calling user is a superuser of the lock. If other user is an invitee the invitation is updated. Returns Unauthorized if calling user is not the superuser of the lock. Returns Not Found if lockID or otherUserID do not exist or there is no corresponding invitation for other user. Returns Bad Request if type is not valid",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "type",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/:otherUserID": {
      "delete": {
        "summary": "Deletes user specified by userID from lock specified by lockID",
        "description": "Returns Unauthorized if the calling user is not able to manage the lock.  Returns Not Found if lock or otherUser do not exist.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/guestbook": {
      "put": {
        "summary": "create a new guestbook entry",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/guestbookentries/count": {
      "get": {
        "summary": "determines the number of guestbook entries and returns it in the response body",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/guestbookentries/:count/:start": {
      "get": {
        "summary": "Get summary of up to \"count\" guestbook entries starting with \"start\"",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "count",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "start",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/guestbookentry/:entryID": {
      "get": {
        "summary": "Deletes a guestbook entry from a house",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "entryID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/logs/:lockID/:startDateTime/:endDateTime": {
      "get": {
        "summary": "retrieves logs for :lockID from :startDateTime to :endDateTime",
        "description": "returns 200 if date range and lockID can be satisfied.  404 otherwise.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dateTime": {
                        "description": "YYYY-MM-DDTHH:MM:SS.mmmZ (year-month-dayThours:minutes:seconds.milisecondsZ)",
                        "type": "string"
                      },
                      "LockID": {
                        "description": "Lock ID",
                        "type": "string"
                      },
                      "action": {
                        "description": "LOCK, UNLOCK, ADD, REMOVE",
                        "type": "string"
                      },
                      "callingUser": {
                        "description": "User information for calling user (See GET /users/:userID)",
                        "type": "string"
                      },
                      "otherUser": {
                        "description": "user informmation for the operand of a GRANT/DENY action (See GET /users/:userID)",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "startDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "endDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/activity/:startDateTime/:endDateTime": {
      "get": {
        "summary": "Gets 100 most recent activities across all lock I can use.",
        "description": "Limit of 100 entries returned. Returns activity on locks callingUser managers or superuses. Returns only callingUsers's activity on locks where he is a user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logEntries": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "dateTime": {
                            "description": "milliseconds since epoch",
                            "type": "string"
                          },
                          "action": {
                            "description": "<lock, unlock, add, remove, addtorule, removefromrule>",
                            "type": "string"
                          },
                          "callingUserID": {
                            "description": "65ced7f1",
                            "type": "string"
                          },
                          "LockID": {
                            "description": "<Lock ID>",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "users": {
                      "type": "object",
                      "properties": {
                        "userID1": {
                          "type": "object",
                          "properties": {
                            "UserID": {
                              "description": "<user id>",
                              "type": "string"
                            },
                            "FirstName": {
                              "description": "<first name>",
                              "type": "string"
                            },
                            "LastName": {
                              "description": "<last name>",
                              "type": "string"
                            },
                            "UserName": {
                              "description": "<user name>",
                              "type": "string"
                            },
                            "PhoneNo": {
                              "description": "<phone number>",
                              "type": "string"
                            },
                            "imageInfo": {
                              "type": "object",
                              "properties": {
                                "original": {
                                  "type": "object",
                                  "properties": {
                                    "width": {
                                      "description": "<image width>",
                                      "type": "string"
                                    },
                                    "height": {
                                      "description": "<image height>",
                                      "type": "string"
                                    },
                                    "format": {
                                      "description": "<jpg,png, etc>",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "http url to image",
                                      "type": "string"
                                    },
                                    "secure_url": {
                                      "description": "https url to image",
                                      "type": "string"
                                    }
                                  }
                                },
                                "thumbnail": {
                                  "type": "object",
                                  "properties": {
                                    "width": {
                                      "description": "<image width>",
                                      "type": "string"
                                    },
                                    "height": {
                                      "description": "<image height>",
                                      "type": "string"
                                    },
                                    "format": {
                                      "description": "<jpg,png, etc>",
                                      "type": "string"
                                    },
                                    "url": {
                                      "description": "http url to image",
                                      "type": "string"
                                    },
                                    "secure_url": {
                                      "description": "https url to image",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "houses": {
                      "type": "object",
                      "properties": {
                        "houseID1": {
                          "type": "object",
                          "properties": {
                            "HouseName": {
                              "description": "<house name>",
                              "type": "string"
                            },
                            "HouseID": {
                              "description": "<house ID>",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "locks": {
                      "type": "object",
                      "properties": {
                        "lockID1": {
                          "type": "object",
                          "properties": {
                            "LockID": {
                              "description": "<lock ID>",
                              "type": "string"
                            },
                            "LockName": {
                              "description": "<Lock name>",
                              "type": "string"
                            },
                            "HouseID": {
                              "description": "<house ID>",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "startDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "endDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/log/after/:lockID/:dateTime/:count": {
      "get": {
        "summary": "Gets last `:count` log entries for `:lockID` after `:dateTime` (ms since epoch)",
        "description": "dateTime is in ms since epoch, so unix time must be multiplied by 1000 to get the correct value",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dateTime": {
                      "description": "milliseconds since epoch",
                      "type": "string"
                    },
                    "LockID": {
                      "description": "Lock ID",
                      "type": "string"
                    },
                    "action": {
                      "description": "LOCK, UNLOCK, GRANT, DENY",
                      "type": "string"
                    },
                    "callingUser": {
                      "description": "User information for calling user (See `GET /users/:userID`)",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "dateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "count",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/log/before/:lockID/:dateTime/:count": {
      "get": {
        "summary": "Gets last :count log entries for :lockID before :dateTime (ms since epoch)",
        "description": "dateTime is in ms since epoch, so unix time must be multiplied by 1000 to get the correct value",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dateTime": {
                      "description": "milliseconds since epoch",
                      "type": "string"
                    },
                    "LockID": {
                      "description": "Lock ID",
                      "type": "string"
                    },
                    "action": {
                      "description": "LOCK, UNLOCK, GRANT, DENY",
                      "type": "string"
                    },
                    "callingUser": {
                      "description": "User information for calling user (See GET /users/:userID)",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "dateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "count",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/rules/:lockID": {
      "post": {
        "summary": "Create a usage rule for a lock, which can be applied to a user",
        "description": "This API creates a rule which, when applied to a user, allows the user to operate the lock in the specified time frame.  Recurrence is specified as an iCalendar RFC RRULE string.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "description": "First time when usage window opens (ISO 8601 format)",
                  "type": "string"
                },
                "endTime": {
                  "description": "First time when usage window closes (ISO 8601 format)",
                  "type": "string"
                },
                "recurrence": {
                  "description": "expression of rule's recurrence (see notes)",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ruleID": {
                      "description": "unique ID of rule",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/rules/rulewithuser/:lockID/:otherUserID": {
      "post": {
        "summary": "Create a usage rule for a lock, and apply it to the user specified by otherUserID",
        "description": "This API creates a rule which, when applied to a user, allows the user to operate the lock in the specified time frame.  Recurrence is specified as an iCalendar RFC RRULE string.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "description": "First time when usage window opens  (ISO 8601 format)",
                  "type": "string"
                },
                "endTime": {
                  "description": "First time when usage window closes  (ISO 8601 format)",
                  "type": "string"
                },
                "recurrence": {
                  "description": "expression of rule's recurrence (see notes)",
                  "type": "string"
                },
                "schedule": {
                  "description": "Rule schedule in iCalender data format (RFC 5545)",
                  "type": "string"
                },
                "Name": {
                  "description": "string containing name of person to be granted access to lock",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "startTime",
            "endTime",
            "recurrence",
            "schedule"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ruleID": {
                      "description": "unique ID of rule",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/rules/:ruleID/:otherUserID": {
      "put": {
        "summary": "Apply a rule to a user of a lock",
        "description": "Restricts user specified by otherUserID's access to to the lock specified in ruleID to the time specified in ruleID.  If user specified by otherUserID does not currently have access to the lock, access is granted for the time specified by ruleID.  If user specified by otherUserID currently has unrestricted access to the lock specified in ruleID, an error is returned. If the user currently has restricted access to to the lock specified by ruleID, his access is expanded to include the time specified by ruleID.  If the user specified by otherUserID is a manager or superuser of the lock, an error is returned.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "ruleID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Removes the user specified by otherUserID from rule specified by ruleID",
        "description": "returns an error if rule does not exist",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/locks/rules/:lockID": {
      "get": {
        "summary": "Get a list of rules for a lock",
        "description": "returns all relevant information about a lock rule",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "LockID": {
                      "description": "lock ID",
                      "type": "string"
                    },
                    "RuleID": {
                      "description": "Rule ID",
                      "type": "string"
                    },
                    "startTime": {
                      "description": "start time for rule  (ISO 8601 format)",
                      "type": "string"
                    },
                    "endTime": {
                      "description": "end time for rule  (ISO 8601 format)",
                      "type": "string"
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "UserID": {
                            "description": "user id",
                            "type": "string"
                          },
                          "FirstName": {
                            "description": "first name",
                            "type": "string"
                          },
                          "LastName": {
                            "description": "last name",
                            "type": "string"
                          },
                          "Email": {
                            "description": "email address",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/users/sounds": {
      "get": {
        "summary": "Get a map of sounds by users",
        "description": "returns only the users who have a sound package id",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "<userID>": {
                      "type": "object",
                      "properties": {
                        "soundPackageID": {
                          "description": "sound package id",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/sounds": {
      "get": {
        "summary": "Returns list of sound packages available on lock for a known firmware version of the lock",
        "description": "Returns list of sound packages available on lock for a known firmware version of the lock",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "soundPackageID": {
                        "description": "sound package id",
                        "type": "string"
                      },
                      "lockSoundURL": {
                        "description": "URL for sound file in a format playable on the iPhone and Android, hosted somewhere",
                        "type": "string"
                      },
                      "unlockSoundURL": {
                        "description": "URL for sound file in a format playable on the iPhone and Android, hosted somewhere",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/rules/:ruleID": {
      "delete": {
        "summary": "removes rule specified by ruleID",
        "description": "returns an error if rule does not exist",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "ruleID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/bridges/:bridgeID": {
      "get": {
        "summary": "return the data associated with a bridge, including the lockIds",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bridgeId": {
                      "description": "a unique manufacturer id",
                      "type": "string"
                    },
                    "mfgId": {
                      "description": "manufacturer id",
                      "type": "string"
                    },
                    "lockIds": {
                      "description": "an array of locks to be associated with the bridge",
                      "type": "string"
                    },
                    "deviceModel": {
                      "description": "the model of the device",
                      "type": "string"
                    },
                    "appID": {
                      "description": "the client used to create the bridge",
                      "type": "string"
                    },
                    "firmwareVersion": {
                      "description": "the version reported by the bridge - this may or may not be provided for all manufacturers.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "bridgeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "delete a bridge lock association",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/webhook/:lockID": {
      "post": {
        "summary": "Sets up the notification hook for the lock specified by lockID.",
        "description": "###notificationTypes\nA JSON array containing one or more of: \n\nnotificationType | Meaning\n---------------- | -------\noperation | notification of lock usage\nsystemstatus | notification of change in connectivity of remote bridge to service\nbattery | notification of battery status requiring lock owner's attention\naccessmgmt | notification of change in access to the lock by any user\nconfiguration | notification of change in lock configuration including but not limited to lock name and addition/removal of bridge.\n\n###Responses:\nCode | Reason \n---- | ------\n 200 | body = {\"message\": \"OK\"} call succeeded\n 401 | authorization token is not valid.\n 403 | * the user represented by the authorization token is not an owner of the lock\n     | * the Client ID does not have permission to subscribe to notifications on behalf of the user\n     | * or the x-august-api-key header is not valid.\n 404 | the clientID is not known to the system.\n",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "URL the August access control system will hit with notifications",
                  "type": "string"
                },
                "method": {
                  "description": "\"POST\" or \"GET\"",
                  "type": "string"
                },
                "token": {
                  "description": "Token August access control system will present for authentication",
                  "type": "string"
                },
                "clientID": {
                  "description": "Client ID of third-party service provided by August",
                  "type": "string"
                },
                "notificationTypes": {
                  "description": "Array of notification types. See Notes.",
                  "type": "array"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "OK",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/webhook/:lockID/:clientID": {
      "delete": {
        "summary": "Deletes a webhook for an external service",
        "description": "Deletes the webhook connection between an external service and lockID/callingUserID",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "clientID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/webhook/doorbell/:doorbellID": {
      "post": {
        "summary": "Sets up the notification hook for the doorbell specified by doorbellID.",
        "description": "###notificationTypes\nA JSON array containing one or more of: \n\nnotificationType | Meaning\n---------------- | -------\nmotiondetected   | notification of motion detected by doorbell\nvideoavailable   | notification of doorbell video available\nbuttonpush       | notification of doorbell button pushed\n\n###Responses:\nCode | Reason \n---- | ------\n 200 | body = {\"message\": \"OK\"} call succeeded\n 401 | authorization token is not valid.\n 403 | * the user represented by the authorization token is not an owner of the doorbell\n     | * the Client ID does not have permission to subscribe to notifications on behalf of the user\n     | * or the x-august-api-key header is not valid.\n 404 | the clientID is not known to the system.\n",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "URL the August access control system will hit with notifications",
                  "type": "string"
                },
                "method": {
                  "description": "\"POST\" or \"GET\"",
                  "type": "string"
                },
                "token": {
                  "description": "Token August access control system will present for authentication",
                  "type": "string"
                },
                "clientID": {
                  "description": "Client ID of third-party service provided by August",
                  "type": "string"
                },
                "notificationTypes": {
                  "description": "Array of notification types. See Notes.",
                  "type": "array"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "OK",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/webhook/doorbell/:doorbellID/:clientID": {
      "delete": {
        "summary": "Deletes a doorbell webhook for an external service",
        "description": "Deletes the doorbell webhook connection between an external service and doorbellID/callingUserID",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "clientID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/webhook/user": {
      "post": {
        "summary": "Sets up the notification hook for the user specified by otherUserID.",
        "description": "###notificationTypes\nA JSON array containing one or more of: \n\nnotificationType | Meaning\n---------------- | -------\nlockmembership | changes to a user/lock relationship\n\n###Responses:\nCode | Reason \n---- | ------\n 200 | body = {\"message\": \"OK\"} call succeeded\n 401 | authorization token is not valid.\n 403 | * the user represented by the authorization token is not an owner of the doorbell\n     | * the Client ID does not have permission to subscribe to notifications on behalf of the user\n     | * or the x-august-api-key header is not valid.\n 404 | the clientID is not known to the system.\n",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "description": "URL the August access control system will hit with notifications",
                  "type": "string"
                },
                "method": {
                  "description": "\"POST\" or \"GET\"",
                  "type": "string"
                },
                "token": {
                  "description": "Token August access control system will present for authentication",
                  "type": "string"
                },
                "clientID": {
                  "description": "Client ID of third-party service provided by August",
                  "type": "string"
                },
                "notificationTypes": {
                  "description": "Array of notification types. See Notes.",
                  "type": "array"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "OK",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/webhook/user/:clientID": {
      "delete": {
        "summary": "Deletes a user webhook for an external service",
        "description": "Deletes the user webhook ",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "clientID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/status": {
      "put": {
        "summary": "Returns the status of a lock from the locks collection.",
        "description": "Possible values 'locked,' 'unlocked,' 'unknown,' 'not-advertising.'",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "unlocked|locked|unknown|not-advertising",
                      "type": "string"
                    },
                    "dateTime": {
                      "description": "UTC time of status update",
                      "type": "string"
                    },
                    "isLockStatusChanged": {
                      "description": "boolean: whether or not status changed during previous update",
                      "type": "boolean"
                    },
                    "valid": {
                      "description": "boolean: currently always true",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/keypads/:keypadID": {
      "get": {
        "summary": "return the data associated with an associated keypad",
        "description": "Calling user must be a lock super user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serialNumber": {
                      "description": "the serial number of the keypad",
                      "type": "string"
                    },
                    "lockID": {
                      "description": "the lock it is associated with",
                      "type": "string"
                    },
                    "firmwareVersion": {
                      "description": "the version reported by the keypad",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "keypadID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "deletes a keypad lock association and moves the its offline key to deleted",
        "description": "Calling user must be a lock super user.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/locks/:lockID/pins": {
      "get": {
        "summary": "Get all pins for a given lock.",
        "description": "Created, loaded, deleting, disabling, disabled, and enabled can all contain pin like objects.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "lockID": {
                            "description": "string",
                            "type": "string"
                          },
                          "userID": {
                            "description": "string",
                            "type": "string"
                          },
                          "pin": {
                            "description": "string",
                            "type": "string"
                          },
                          "firstName": {
                            "description": "string",
                            "type": "string"
                          },
                          "lastName": {
                            "description": "string",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "loaded": {
                      "type": "array",
                      "items": {
                        "type": "unknown"
                      }
                    },
                    "deleting": {
                      "type": "array",
                      "items": {
                        "type": "unknown"
                      }
                    },
                    "disabling": {
                      "type": "array",
                      "items": {
                        "type": "unknown"
                      }
                    },
                    "disabled": {
                      "type": "array",
                      "items": {
                        "type": "unknown"
                      }
                    },
                    "enabling": {
                      "type": "array",
                      "items": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "post": {
        "summary": "Load, delete, disable and enable PINs for users on a lock. Newer locks can support schedules on PINs.",
        "description": "See [Remote PIN Management](https://partners.august.com/userguide/apiguide/remote-pin-management-for-the-august-keypad/)",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "commands": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "augustUserID": {
                        "description": "string: either a phone number identifier, email identifier or an August internal user ID",
                        "type": "string"
                      },
                      "partnerUserID": {
                        "description": "string: an user id which will be used to report upon completion of each pin command",
                        "type": "string"
                      },
                      "firstName": {
                        "description": "the firstName of the user, optional",
                        "type": "string"
                      },
                      "lastName": {
                        "description": "the lastName of the user, optional",
                        "type": "string"
                      },
                      "pin": {
                        "description": "string: a valid pin, ideally obtained in previous step to avoid failures",
                        "type": "string"
                      },
                      "action": {
                        "description": "string: load, delete, disable, enable",
                        "type": "string"
                      },
                      "accessType": {
                        "description": "string: the type of the pin: always, recurring, temporary, oneTime",
                        "type": "string"
                      },
                      "accessTimes": {
                        "description": "string: this field only required for access types recurring & temporary; for recurring access type possible values are \"STARTSEC=<sec from start of day>[;ENDSEC=<sec from start of day>]\"; if timezone of lock is known this is also valid: \"DTSTART=<ISO date in UTC>[;DTEND=<ISO date in UTC>]\" (end date optional, if not provided is set to 1 hour from start date). For temporary times can be ISO date strings (DTSTART/DTEND) or epoch values, e.g. \"STARTSEC=<epoch value>;[;ENDSEC=<epoch value>].\" Not required when schedule is provided.",
                        "type": "string"
                      },
                      "accessRecurrence": {
                        "description": "string: only required for access type recurring. See recurrence rules under RFC2445, e.g.: \"FREQ=MONTHLY;BYMONTHDAY=10,15;COUNT=20\". Not required when schedule is provided.",
                        "type": "string"
                      },
                      "schedule": {
                        "description": "string: iCal data format following RFC5545 (https://tools.ietf.org/html/rfc5545) required for access types recurring & temporary; when accessTimes & accessRecurrence are provided, data of schedule overrides their values.",
                        "type": "string"
                      },
                      "retry": {
                        "description": "boolean: indicates whether the command should be re-tried in case of failure, optional",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "This deletes all pins associated with a lock.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/revision": {
      "get": {
        "summary": "Get information about the revision the server is running.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "revision": {
                      "description": "package.json version",
                      "type": "string"
                    },
                    "gitCommitHash": {
                      "description": "Hash of the latest git commit",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/doorbells/:doorbellID": {
      "get": {
        "summary": "Get information about an existing doorbell",
        "description": "Returns resource not found if doorbellID does not exist.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "doorbellID": {
                      "description": "String",
                      "type": "string"
                    },
                    "bridgeID": {
                      "description": "String",
                      "type": "string"
                    },
                    "serialNumber": {
                      "description": "String",
                      "type": "string"
                    },
                    "appID": {
                      "description": "String",
                      "type": "string"
                    },
                    "installUserID": {
                      "description": "String",
                      "type": "string"
                    },
                    "name": {
                      "description": "String",
                      "type": "string"
                    },
                    "type": {
                      "description": "Int",
                      "type": "integer"
                    },
                    "operative": {
                      "description": "Boolean",
                      "type": "boolean"
                    },
                    "installDate": {
                      "description": "Date",
                      "type": "string"
                    },
                    "osVersionHistory": {
                      "description": "Object",
                      "type": "object"
                    },
                    "bridgeAppVersionHistory": {
                      "description": "Object",
                      "type": "object"
                    },
                    "doorbellAppVersionHistory": {
                      "description": "Object",
                      "type": "object"
                    },
                    "currentOSVersion": {
                      "description": "Version String",
                      "type": "string"
                    },
                    "currentBridgeAppVersion": {
                      "description": "Version String",
                      "type": "string"
                    },
                    "currentDoorbellAppVersion": {
                      "description": "Version String",
                      "type": "string"
                    },
                    "pubsubChannel": {
                      "description": "String",
                      "type": "string"
                    },
                    "LockID": {
                      "description": "String",
                      "type": "string"
                    },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "motion_notifications": {
                          "description": "Boolean",
                          "type": "boolean"
                        },
                        "enable_sound_on_doorbell": {
                          "description": "Boolean",
                          "type": "boolean"
                        },
                        "powerProfilePreset": {
                          "description": "number",
                          "type": "number"
                        }
                      }
                    },
                    "chimes": {
                      "description": "Array",
                      "type": "array"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Deletes a doorbell",
        "description": "This will return a 404 if doorbellID does not exist and a NotAuthorizedError if user is not a user of the doorbell",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "put": {
        "summary": "Updates doorbell fields that are whitelisted",
        "description": "Currently, only the name field is whitelisted",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/doorbells/:doorbellID/logs/before/:endDateTime/:count": {
      "get": {
        "summary": "Gets doorbell logs before a specified time",
        "description": ":endDateTime should be a date object, a date string, or an integer like unix timestamp",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "description": "[Array of log objects]",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "endDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "count",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/logs/after/:startDateTime/:count": {
      "get": {
        "summary": "Gets doorbell logs after a specified time",
        "description": ":startDateTime should be a date object, a date string, or an integer like unix timestamp",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "description": "[Array of log objects]",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "startDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "count",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/logs/before/:endDateTime/after/:startDateTime": {
      "get": {
        "summary": "Gets doorbell logs before and after specified times",
        "description": "startDateTime and :endDateTime should be a date object, a date string, or an integer like unix timestamp",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "description": "[Array of log objects]",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "endDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "startDateTime",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/pin": {
      "get": {
        "summary": "generates an available random pin and reserve it for an system specified time",
        "description": "if there is no pin slot left (208 at the last count) it will return 409 (ConflictError)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pin": {
                      "description": "the pin for this user",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/credential": {
      "get": {
        "summary": "generates an available random pin & slot number and reserve it for a system specified time",
        "description": "if there is no pin slot left (208 at the last count) it will return 409 (ConflictError)\nthis endpoint is going to replace 'GET /locks/:lockID/pin'\nthe three different type of lock credentials will not share the same slots'\ntype param is required in query",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "description": "string: pin, rf, finger",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pin": {
                      "description": "the pin for this user",
                      "type": "string"
                    },
                    "slot": {
                      "description": "the slot for user",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/credentials": {
      "get": {
        "summary": "query credentials in various states with a lock",
        "description": "created: means that the CREDENTIAL should be loaded onto the lock, first step of associating a CREDENTIAL loaded: means that the CREDENTIAL has been loaded to the lock, second and final step of associating a CREDENTIAL deleting: means that the CREDENTIAL should be deleted, first step of removing a CREDENTIAL from a lock deleted: means that the CREDENTIAL has been be deleted from the lock disabling: means the the CREDENTIAL should be disabled disabled: means that the CREDENTIAL has been marked as disabled on the lock enabling: means that the CREDENTIAL should be enabled enabled: means that the CREDENTIAL has been enabled, which means that it is back in the loaed group of CREDENTIALS. if 'type' is optional, the endpoint will query all credentials from the lock, otherwise it will return the unique type of lock credentialsif the callingUser is a lock manager, it will return all the credentials from the lock, otherwise it only return his locks' credentials",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "description": "string: pin, rf, finger",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "description": "array of the unique lock & user which state is created",
                      "type": "array"
                    },
                    "loaded": {
                      "description": "array of the unique lock & user which state is loaded",
                      "type": "array"
                    },
                    "disabled": {
                      "description": "array of the unique lock & user which state is disabled",
                      "type": "array"
                    },
                    "disabling": {
                      "description": "array of the unique lock & user which state is disabling",
                      "type": "array"
                    },
                    "enabling": {
                      "description": "array of the unique lock & user which state is enabling",
                      "type": "array"
                    },
                    "deleting": {
                      "description": "array of the unique lock & user which state is deleting",
                      "type": "array"
                    },
                    "updating": {
                      "description": "array of the unique lock & user which state is updating",
                      "type": "array"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "This deletes all pins/slots associated with a lock by type.",
        "description": "this is a replacement/update for 'DEL /locks/:lockID/pins'",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "description": "string: pin, rf, finger",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/users/cameras/mine": {
      "get": {
        "summary": "returns an array of cameras for the calling user",
        "description": "camera data includes manufacturer's information if camera is not from August",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": []
    },
    "/houses/:houseID/activity/:limit": {
      "get": {
        "summary": "This gets all the logs for a given house.",
        "parameters": [
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "description": "This is a timestamp (epoch milliseconds) used to only return documents older than this date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dateTime": {
                        "description": "",
                        "type": "number"
                      },
                      "action": {
                        "description": "",
                        "type": "string"
                      },
                      "callingUser": {
                        "description": "",
                        "type": "object"
                      },
                      "info": {
                        "description": "",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "limit",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/activities": {
      "get": {
        "summary": "This gets all the logs for a given house, allows to provide a `limit` query string",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dateTime": {
                        "description": "",
                        "type": "number"
                      },
                      "action": {
                        "description": "",
                        "type": "string"
                      },
                      "callingUser": {
                        "description": "",
                        "type": "object"
                      },
                      "info": {
                        "description": "",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/:otherUserID/imageinfo": {
      "get": {
        "summary": "get information on images for otherUser that are specific to callingUser",
        "description": "Generally, applications should use the thumbnail.  Returns ressource not found if the calling user has not set an image for the other user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "original": {
                      "type": "object",
                      "properties": {
                        "width": {
                          "description": "width of original image",
                          "type": "string"
                        },
                        "height": {
                          "description": "height of original image",
                          "type": "string"
                        },
                        "format": {
                          "description": "format of original image",
                          "type": "string"
                        },
                        "url": {
                          "description": "url of original image",
                          "type": "string"
                        }
                      }
                    },
                    "thumbnail": {
                      "type": "object",
                      "properties": {
                        "width": {
                          "description": "width of thumbnail",
                          "type": "string"
                        },
                        "height": {
                          "description": "height of thumbnail",
                          "type": "string"
                        },
                        "format": {
                          "description": "format of thumbnail",
                          "type": "string"
                        },
                        "url": {
                          "description": "url of thumbnail",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/diagnostics": {
      "get": {
        "summary": "Get doorbell diagnostic information and wake doorbell",
        "description": "Status Codes:\n401 InvalidCredentialsError\n  - The access token is invalid.\n  - The user is blacklisted.\n404 doorbellID does not exist or a NotAuthorizedError if user is not a user of the doorbell\n",
        "parameters": [
          {
            "name": "wakeup",
            "in": "query",
            "required": false,
            "schema": {
              "description": "<boolean> whether or not to tcp wakeup device",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentFirmwareVersion": {
                      "description": "<string> empty string or the current firmware version",
                      "type": "string"
                    },
                    "expectedFirmwareVersion": {
                      "description": "<string> empty string or expected firmware version",
                      "type": "string"
                    },
                    "batteryLow": {
                      "description": "<boolean>",
                      "type": "boolean"
                    },
                    "lastDoorbellUpdate": {
                      "description": "<number> seconds after epoch",
                      "type": "string"
                    },
                    "status": {
                      "description": "<string> /doorbell_offline|doorbell_call_status_online|standby/, standby only applicable for D3",
                      "type": "string"
                    },
                    "activeTcpWakeupConnection": {
                      "description": "<boolean>, always false for D1 and D2",
                      "type": "boolean"
                    },
                    "internalStatus": {
                      "description": "<string> status used for tcp wakeup,  /online|offline|standby|wakingup|goingToSleep/ OR emptyString",
                      "type": "string"
                    },
                    "hasActivePubsubConnection": {
                      "description": "<boolean> internal status used for tcp wakeup response",
                      "type": "boolean"
                    },
                    "tcpWakeupStatusCode": {
                      "description": "<number> status code of tcp wakeup /200|202|412/, 0 if no tcp wakeup was requested in query parameters",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/appdevices": {
      "get": {
        "summary": "Get all app devices, intended for app device picker",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/appdevices/resources": {
      "get": {
        "summary": "Device serial number is used to match app device record",
        "parameters": [
          {
            "name": "[serialNumber]",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Device serial number",
              "type": "string"
            }
          },
          {
            "name": "[hhID]",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The host hardware's ID",
              "type": "string"
            }
          },
          {
            "name": "[hID]",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The host's ID",
              "type": "string"
            }
          },
          {
            "name": "[udID]",
            "in": "query",
            "required": false,
            "schema": {
              "description": "The universal ID of the device",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/appdevices/:universalDeviceID": {
      "get": {
        "summary": "universalDeviceID matches the specific app device resource",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "universalDeviceID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/devicepicker": {
      "get": {
        "summary": "This returns a device picker compatible for the requesting client",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "description": "semver of the app e.g 3.2.1",
              "type": "string"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "required": true,
            "schema": {
              "description": "string, 'ios' or 'android'",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "devices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "description": "lock",
                            "type": "string"
                          },
                          "devices": {
                            "type": "array",
                            "items": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/health": {
      "get": {
        "summary": "Get service health information",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": []
    },
    "/users/:otherUserID/image": {
      "post": {
        "summary": "Set the image the calling user gets when retrieving information about the otherUser",
        "description": "POSTing to /users/:otherUserID will associate the image in the body with the other user when the calling user requests an image for the other user",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/me/legal": {
      "get": {
        "summary": "sets the legal status of the user vs. eula, tos, privacy",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "approved": {
                  "description": "boolean: true or false",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/users/me/locale": {
      "put": {
        "summary": "sets the user's language and locale",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "language": {
                  "description": "string: lowercase two-letter ISO 639-1 language code",
                  "type": "string"
                },
                "country": {
                  "description": "string: uppercase two-letter ISO 3166-1 alpha-2 country code",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/session": {
      "post": {
        "summary": "verifies different identifers for a user and responds with an access token",
        "description": "returns an error if trying to delete the last of an identifier type",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "identifer": {
                  "description": "email or phone",
                  "type": "string"
                },
                "installId": {
                  "description": "id of the device",
                  "type": "string"
                },
                "password": {
                  "description": "users password",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/session/:identifier": {
      "delete": {
        "summary": "Deletes all session keys for the calling user",
        "description": "Deletes all sessions for the calling user. All subesequent API calls will respond that a new session must be retrieved.  Use in the case of a lost phone, etc.  identifer can be Email, in the form \"email:<email>\", or Phone Number in form \"phone:+<country code><number with no spaces>\"",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses": {
      "post": {
        "summary": "Creates a new house for calling user and makes the user the superuser of the house",
        "description": "At least a house name is required.  The only error from this function is Bad Request when no house name is provided.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "HouseName": {
                  "description": "description: <Name of house (home, \"crash pad\", ...)",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "HouseName"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "HouseName": {
                      "description": "Name of house",
                      "type": "string"
                    },
                    "HouseID": {
                      "description": "ID of House",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/houses/:houseID/image": {
      "post": {
        "summary": "Set the image the image for the house",
        "description": "PUTing to /houses/:houseID/image will associate the image in the body with house and that image will be returned with house info",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/nestawaystatus": {
      "get": {
        "summary": "gets the Nest away status for a house that has been associated with a nest structure",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "away": {
                      "description": "either home, away, or unknown",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/temperature": {
      "get": {
        "summary": "returns the temperature for a house",
        "description": "size of body array will vary on number of sensors",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "farenheit": {
                        "description": "temperature in degrees farenheit",
                        "type": "string"
                      },
                      "celsius": {
                        "description": "temperature in degrees celsius",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/nestawaystatus/:status": {
      "put": {
        "summary": "sets the away status for the Nest structure associcated with the specified August house",
        "description": "valid values for status are home and away.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "status",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/neststructure/:structureID": {
      "put": {
        "summary": "disassocites the specified Nest structure with the specified August house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "structureID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/lock/:houseID/:lockID": {
      "delete": {
        "summary": "Remove lock lockID from house houseID",
        "description": "Returns 200/OK if successful, 404 if lockID:houseID relationship is not found, and 403 if not authorized",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/identifier/:identifier": {
      "delete": {
        "summary": "remove an identifier from a user",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "identifier",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/identifier/:identifierType": {
      "get": {
        "summary": "Gets a user's identifier of a certain type. Some identifier types may be created if none exists yet",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "identifier": {
                      "description": "user identifier of requested type",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "identifierType",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:houseID": {
      "post": {
        "summary": "Adds a lock to a house.",
        "description": "Requestor must provide UNIQUE ID of the lock.  If LockID or Name are not present, a Bad Request error is returned. If the user is not a manager or superuser of the house, a Not Authorized error is returned.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "LockID": {
                  "description": "unique identifier of lock [see notes]",
                  "type": "string"
                },
                "LockName": {
                  "description": "name of lock",
                  "type": "string"
                },
                "hostHardwareID": {
                  "description": "Host hardware's ID",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "LockID",
            "LockName"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "LockID": {
                      "description": "<unique ID of lock>",
                      "type": "string"
                    },
                    "LockName": {
                      "description": "<Text string>",
                      "type": "string"
                    },
                    "Type": {
                      "description": "Integer.  Curently the only lock type supported is 1",
                      "type": "string"
                    },
                    "Updated": {
                      "description": "YYYY-MM-DDTHH:MM:SS.mmmZ",
                      "type": "string"
                    },
                    "Created": {
                      "description": "YYYY-MM-DDTHH:MM:SS.mmmZ",
                      "type": "string"
                    },
                    "HouseID": {
                      "description": "ID of house to which lock was added",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/resetkeys": {
      "put": {
        "summary": "Move all keys to deleted",
        "description": "move all keys (except key index 0) to deleted",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/acknowledgeparamupdate/:lockID": {
      "put": {
        "summary": "acknowledge update of params client was instructed to set by server",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "<parameter1 name>": {
                  "description": "<parameter 1 value>",
                  "type": "string"
                },
                "<parameter2 namee": {
                  "description": "<parameter 2 value>",
                  "type": "string"
                },
                "...": {
                  "description": "<parameter value>",
                  "type": "string"
                },
                "<parameter n name>": {
                  "description": "<parameter n value>",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/offlinekeys/:action": {
      "put": {
        "summary": "Acquire ownership of a known lock.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "UserID": {
                  "description": "id of the user whom the offline key is assigned to",
                  "type": "string"
                },
                "slot": {
                  "description": "slot to write the key",
                  "type": "string"
                },
                "key": {
                  "description": "key to write in the slot",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "UserID",
            "slot"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "success",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "action",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/timeadjustment/:lockID/:realtime/:locktime": {
      "put": {
        "summary": "Inform server of time adjustment for a lock",
        "description": "When a mobile device detects the clock on the lock is out of sync, it sets the time and informs the server of the adjustment.  Returns authorization error if callingUser is not able to use lock.  Returns success otherwise.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "realtime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "locktime",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/timeadustment/:lockID/:realtime/:locktime": {
      "put": {
        "summary": "Inform server of time adjustment for a lock",
        "description": "alias for PUT /locks/timeadjustment/:lockID/:realtime/:locktime (no j in timeadjustment)",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "realtime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "locktime",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/users/:otherUserID/sound": {
      "put": {
        "summary": "Set sound package id of lock.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "soundPackageID": {
                  "description": "sound package id",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "soundPackageID"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "description": "success",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/setnotification/:lockID/:otherUserID/:on": {
      "post": {
        "summary": "sets notifications (lock, unlock, both, neither) when otherUser uses lock",
        "description": "sends push notification to callingUser (phone or dashboard) when otherUser uses lock.  Values for 'on':  lock - notifies on lock, unlock - notifies on unlock, both - notifies on both, neither disables notifications when otherUser uses lock",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "on",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/notifications/:lockID/:otherUserID": {
      "get": {
        "summary": "returns notifications for specified user on specified lock",
        "description": "returns all notifications calling user has for specified user on lock specified",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/usage/:lockID": {
      "put": {
        "summary": "inform service of lock usage",
        "description": "Notifies service of lock operation.  If a key is \"in flight\", it closes the loop and finalizes the process.  Creates a log entry for the usage, and triggers notifications to all clients listening for updates on the lock",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "description": "lock action--lock or unlock",
                  "type": "string"
                },
                "mechanical": {
                  "description": "mechanical result:  success or failure",
                  "type": "string"
                },
                "crypto": {
                  "description": "cryptographic result:  sucess or failure",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "action",
            "mechanical",
            "crypto"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/lockmessages": {
      "get": {
        "summary": "get messages regarding a lock",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/lockstatus/:lockID/:status": {
      "put": {
        "summary": "inform the service of the current status of the lock",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "status",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/log/:lockID/:action": {
      "post": {
        "summary": "creates a log entry that :action was performed by callingUser at :dateTime",
        "description": "200 OK status is returned if all is well.  Returns invalid request if the action is not supported.  supported actions are:  'lock', 'unlock', 'lockcommand', and 'lockdata'.  Date format is YYYYMMDDHHMMSSmmm.  If action is lockdata or lockcommand, body must contain data from the lock",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "action",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/apns/devtoken": {
      "post": {
        "summary": "adds an APNS device token associated with the callingUser",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "apnstoken": {
                  "description": "token provided by iOS for the notification system.",
                  "type": "string"
                },
                "voiptoken": {
                  "description": "token provided by iOS for the VOIP notification system.",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/apns/notifyuser/:otherUserID": {
      "put": {
        "summary": "sends an Apple Push Notification Service ot the user specified by otherUserID",
        "description": "If the user specified by otherUserID does not accept notifications, and error is returned",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "message to send to user specified by otherUserID",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/messages": {
      "get": {
        "summary": "get all unacknowledged system notifications for callingUser",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/messages/acknowledge/:messageID": {
      "put": {
        "summary": "acknowledge message so it is not delivered again by GET /messages/:userID",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "messageID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/initiatecomm/:lockID": {
      "put": {
        "summary": "takes two random numbers then returns a packet to be sent to the lock and a URL to PUT the response",
        "description": "The mobile device PUTs mRand1 and mRand2 to the endpoint and then sends the packet in the response to the lock. When the lock responds, the response is send to the url specified by URL using the method specified by method.  Returns an Invalid Argument error if checksum fails.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "mRand1": {
                  "description": "random number generated by client",
                  "type": "string"
                },
                "mRand2": {
                  "description": "random number generated by client",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "packet": {
                      "description": "hex-encoded stream to send to lock",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL to which the response must be delivered using the method specified in the method key",
                      "type": "string"
                    },
                    "method": {
                      "description": "method to use to deliver the response from the lock.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/m2lkeyexchangepacket/:lockID": {
      "put": {
        "summary": "Generates random numbers then returns a packet to be sent to the lock and a URL to PUT the response",
        "description": "The mobile device PUTs mRand1 and mRand2 to the endpoint and then sends the packet in the response to the lock. When the lock responds, the response is send to the url specified by URL using the method specified by method.  Returns an Invalid Argument error if checksum fails.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "packet": {
                      "description": "hex-encoded stream to send to lock",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL to which the response must be delivered using the method specified in the method key",
                      "type": "string"
                    },
                    "method": {
                      "description": "method to use to deliver the response from the lock.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/getlockrands/:lockID": {
      "put": {
        "summary": "takes the lock's response to the exchange key packet and returns lRand1 and lRand2",
        "description": "The mobile device PUTs the response from the exchange key command to this endpiont.  The service returns lRand1 and lRand2 for use in the session key",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "LockResponse": {
                  "description": "hex-encoded response that lock returned from exchange keys command",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lRand1": {
                      "description": "lRand1 for use in session key",
                      "type": "string"
                    },
                    "lRand2": {
                      "description": "lRand2 for use in session key",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/updateurl": {
      "get": {
        "summary": "returns the URL to which to connect for real-time updates",
        "description": "The real-time update protocol is documented elsewhere (Use the Source, Luke)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updateurl": {
                      "description": "url to which to connect",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/validation/:idtype": {
      "post": {
        "summary": "sends a verification code to an identifier, if no identifier is specified in the body a code will be sent to the last identifier of idtype on file ",
        "description": "sends an verification code to an identifier, if none is specified last identifier of type idtype will be used.  idtype can be either phone or email",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "description": "email address or phone number",
                  "type": "string"
                },
                "smsHashString": {
                  "description": "SMS hash string used by SMS Retriever API on Android",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "description": "email or phone number the verification is sent to",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "idtype",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/validate/:idtype": {
      "post": {
        "summary": "claims a verification code sent to an identifier, if no identifier is specified in the body a code will be sent to the last identifier of idtype on file ",
        "description": "if no identifier is specified in the body last identifier of type idtype will be used to claim the code.  idtype can be either phone or email",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "description": "the verification code that was sent to the identifier",
                  "type": "string"
                },
                "oneof": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "description": "email address",
                      "type": "string"
                    },
                    "phone": {
                      "description": "telephone number",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": [
            "code"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "id of the identifier associated with the user",
                      "type": "string"
                    },
                    "value": {
                      "description": "the value of the idenitifer assciated witht he user",
                      "type": "string"
                    },
                    "userId": {
                      "description": "id of the user the identifier has been assciated with",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "idtype",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/telemetry/logautounlockaction": {
      "post": {
        "summary": "logs auto unlock actions for debugging use",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "event": {
                  "description": "single-token string describing event",
                  "type": "string"
                },
                "description": {
                  "description": "optional description of the event",
                  "type": "string"
                },
                "date": {
                  "description": "integer milliseconds since epoch",
                  "type": "string"
                },
                "LockID": {
                  "description": "ID of lock",
                  "type": "string"
                },
                "UserID": {
                  "description": "ID of user",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/bridges": {
      "post": {
        "summary": "associate bridge and lock and returns a token to be used by the bridge",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "bridgeID": {
                      "description": "the identifier of the bridge to use in other request",
                      "type": "string"
                    },
                    "bridgeAuthToken": {
                      "description": "the token to be used by the bridge to connect to the remote bridge server",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/bridges/:bridgeID/notifications/:type": {
      "post": {
        "summary": "set up notification of type specified for bridge specified",
        "description": "Sets up notifications of type specified for the bridge specified for the calling user.  The only type currently supported is system, and the only channel supported is push.  If no body is specified, the channel will be push.",
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "bridgeID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "type",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "disables bridge notification for type specified on specified bridge",
        "description": "Disables notification of type specified for the bridge specified for the calling user.  The only current type supported is system",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/bridges/:bridgeID/notifications": {
      "get": {
        "summary": "returns a list of notifications for the bridge",
        "description": "returns an array of all notifications on the bridge for the calling user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "notification type",
                        "type": "string"
                      },
                      "channel": {
                        "description": "notification channel",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "bridgeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nest/authtoken/:token": {
      "put": {
        "summary": "associates the specified Nest authorization token with the calling user",
        "description": "creates the association if none exists, updates it if it does exist.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nest/structures": {
      "get": {
        "summary": "returns the Nest structures for the user if they have associated their August ID with their Nest ID",
        "description": "There can be more than one structure ID in the response object (which is an Object, not an Array).",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "structure ID": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "name of structure",
                          "type": "string"
                        },
                        "country_code": {
                          "description": "country code of structure",
                          "type": "string"
                        },
                        "time_zone": {
                          "description": "time zone of structure",
                          "type": "string"
                        },
                        "away": {
                          "description": "away status of structure",
                          "type": "string"
                        },
                        "structure_id": {
                          "description": "structure ID",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/appfeatures/:platform/:version": {
      "get": {
        "summary": "Get enabled optional features for platform/version/callingUserID",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "feature name": {
                      "description": "boolean",
                      "type": "boolean"
                    },
                    "other feature name": {
                      "description": "boolean",
                      "type": "boolean"
                    },
                    "...": {
                      "description": "...",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "platform",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/geofenceinfo/:lockID": {
      "put": {
        "summary": "Put information about the calling user's choices on setting geofence for automatic unlock foir the given lockID and platform (iOS or Android)",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "deviceModel": {
                  "description": "string describing the device",
                  "type": "string"
                },
                "movedCenter": {
                  "description": "boolean -- indicates the user moved the center of the geofence (required)",
                  "type": "boolean"
                },
                "changedRadius": {
                  "description": "boolean -- indicates the user changed the radius from the default value (required)",
                  "type": "boolean"
                },
                "newRadius": {
                  "description": "radius the user set if they changed it (Required if changedRadius is true)",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "movedCenter",
            "changedRadius"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/firmware/:lockID/:version": {
      "get": {
        "summary": "Check if there are any ARM updates available and return a new firmware blob if there is a new version available",
        "description": "As of August 2015, this endpoint is deprecated, since it does not support TI firmware updates. All new code should use the endpoint GET /locks/:lockID/firmware/:version",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/firmware/:version": {
      "get": {
        "summary": "Check if any updates are needed for the ARM firwmare or the TI (Bluetooth) firmware.\nThe \"version\" string should be in the form of \"${ARM_GITHASH}-${ARM_VERSION}-${TI_VERSION}\".If the ARM_VERSION is not defined, then use the string \"undefined\" in its place.",
        "description": "Examples of firmware version numbers:\n  For the RC 4 firmware release, the version string would be \"1b5bfedc-undefined-0.4.2\"\n  For the RC 5.1 firmware release, the version string would be \"788113bb-undefined-0.4.2\"\n  For the RC 5.6 firmware release, the version string would be \"403286da-undefined-1.0.0\"\n  For the 1.0.55 firmware release, the version string would be \"d8df5ada-1.0.55-1.1.12\"\n  For the 1.0.75 firmware release, the version string would be \"f98c98f9-1.0.75-1.1.18\"",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updateInfo": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "chip": {
                            "description": "TI or ARM",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the firmware that should be installed on this lock",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/firmware/:chip/:version": {
      "get": {
        "summary": "Gets the firmware update blob for the given chip. Individualizes this firmware update blob if necessary.\nThe \"chip\" string should be either \"arm\" or \"ti\".\nThe \"version\" string should be in the form of \"${ARM_GITHASH}-${ARM_VERSION}-${TI_VERSION}\".If the ARM_VERSION is not defined, then use the string \"undefined\" in its place.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "chip",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/firmware": {
      "get": {
        "summary": "Check for firmware updates for a lock version and its chips, which are specified as query parameters",
        "description": "Status Codes:\n200 OK\n404 ResourceNotFound - lockID not found\n",
        "parameters": [
          {
            "name": "chip",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Chip abbreviation, for example `ti`, `sd`, etc. Since different lock versions have different chips, this parameter will be named differently depending on lock version. For example, for L3: sd=1.1.0&dlg=2.0.0",
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Chip version",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updateInfo": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "chip": {
                            "description": "Chip - for example `ti`, `sd`, `dlg`, `nordic`, etc.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Version of the firmware that should be installed on this lock",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/firmware/keypadcheck": {
      "put": {
        "summary": "This tells the client the lock has firmware supporting the keypad.",
        "description": "Calling user must be a lock super user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supported": {
                      "description": "boolean",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/houseID": {
      "delete": {
        "summary": "deletes a house from the system and removes all assocications of that house",
        "description": "returns 404 if house not found, 403 if callingUser does not own house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/houses/adduser/:houseID/:otherUserID/:type": {
      "put": {
        "summary": "Add a user with a type to a house",
        "description": "Returns 404 if house not found, 403 if callingUser is not superuser of house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "type",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/houses/:houseID/users/:otherUserID/setusertype/:type": {
      "put": {
        "summary": "switch a user of a house between user and superuser",
        "description": "type is either ['user', 'superuser'].  Returns a 404 if house not found.  Returns 403 if callingUser is not a superuser of the house.  Returns 412 if otherUser is not a user of the house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "type",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/status/:lockID": {
      "put": {
        "summary": "Updates the status of a lock in the locks collection.",
        "description": " Possible values 'locked,' 'unlocked,' 'unknown,' 'not-advertising.' The end point also publishes status messages and hits web hooks when applicable.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/keypads/firmware/:keypadID/:version": {
      "get": {
        "summary": "Check if there are any version updates available and return a new firmware blob if there is a new version available",
        "description": "Returns 204 and no body if keypad has proper version.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": [
        {
          "name": "keypadID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/keypads/:keypadID/firmware/:version": {
      "get": {
        "summary": "Saves given version as current firmware version in db and returns new version if available.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "updateInfo": {
                      "type": "object",
                      "properties": {
                        "version": {
                          "description": "Version of the new update firmware (semver).",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "keypadID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "version",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/keypads/:keypadID/code": {
      "get": {
        "summary": "Gets the reset code associate with that particular keypad.",
        "description": "returns a 404 if the keypad serial number is not found, 403 if it is associated with a lock the user is not a superuser of",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resetCode": {
                      "description": "a 4 digit string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "keypadID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "put": {
        "summary": "Stores the resed code of the keypad, the reset code is retained accross lock disassociation",
        "description": "returns a 404 if the keypad SN is not found, 403 if there is a permission issue, 409 if the resetCode is not valid",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "set": {
                  "description": "unknown",
                  "type": "unknown"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/keypads/:keypadID/:lockID/offlinekey": {
      "get": {
        "summary": "Creates a handshake key and adds it to given lock's offline keys,",
        "description": "Calling user must be a lock super user.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "handshakeKey": {
                      "description": "Lock/keypad handshake key.",
                      "type": "string"
                    },
                    "manufacturingHandshakeKey": {
                      "description": "Keypad/phone handshake key.",
                      "type": "string"
                    },
                    "currentHandshakeKey": {
                      "description": "Keypad/phone handshake key.",
                      "type": "string"
                    },
                    "nextHandshakeKey": {
                      "description": "Keypad/phone handshake key.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "keypadID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/keypads": {
      "post": {
        "summary": "associate a keypad and a lock and returns the keypad id, the locks collection will be updated to reflect the association",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keypadID": {
                      "description": "the identifier of the keypad to use in other request",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/keypads/:keypadID/handshakeKey": {
      "put": {
        "summary": "This updates a keypad's currentHandshakeKey.",
        "description": "Calling user must be a lock super user.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "nextHandshakeKey": {
                  "description": "This is the nextHandshakeKey (generated from the same endpoint with a GET request) to replace the currentHandshakeKey.",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "nextHandshakeKey"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "keypadID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/apps/mine": {
      "get": {
        "summary": "gets a list of apps associated the callingUser",
        "description": "Response body is an array of connected apps.  If there are no apps, it is an array of length 0.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "description": "ID of app",
                        "type": "string"
                      },
                      "name": {
                        "description": "name of app",
                        "type": "string"
                      },
                      "icon": {
                        "description": "URL to icon for app",
                        "type": "string"
                      },
                      "description": {
                        "description": "description",
                        "type": "string"
                      },
                      "type": {
                        "description": "type",
                        "type": "string"
                      },
                      "disconnectURL": {
                        "description": "Oauth disconnect URL",
                        "type": "string"
                      },
                      "infoURI": {
                        "description": "Oauth info URI",
                        "type": "string"
                      },
                      "partnerID": {
                        "description": "ID of partner - maps to `_id` field in GET /partners response",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners": {
      "get": {
        "summary": "retrives a list of service offerings from partners that integrate with August",
        "description": "Only return partners of type `WORKS_WITH`",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "description": "ID of partner",
                        "type": "string"
                      },
                      "name": {
                        "description": "name of partner",
                        "type": "string"
                      },
                      "heroImageURL": {
                        "description": "URL to partner hero image",
                        "type": "string"
                      },
                      "partnerURL": {
                        "description": "URL to partner homepage",
                        "type": "string"
                      },
                      "logoURL": {
                        "description": "URL to partner logo",
                        "type": "string"
                      },
                      "wordmarkURL": {
                        "description": "URL to partner wordmark",
                        "type": "string"
                      },
                      "partnerTagline": {
                        "description": "partner tagline",
                        "type": "string"
                      },
                      "jointTagline": {
                        "description": "tagline tailored to August",
                        "type": "string"
                      },
                      "partnerDescription": {
                        "description": "company description",
                        "type": "string"
                      },
                      "jointDescription": {
                        "description": "service offering description",
                        "type": "string"
                      },
                      "promotion": {
                        "description": "available partnership promotions",
                        "type": "string"
                      },
                      "locations": {
                        "description": "where the service is provided",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners/user": {
      "post": {
        "summary": "Create August user/identifiers per given partner user data. Generates access token and (returns) auth code and stores in cache for verification when calling OAuth service.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "userID": {
                  "description": "Partner user id",
                  "type": "string"
                },
                "name": {
                  "description": "String containing both first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "Unverified email address",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "auth_code": {
                      "description": "Code for use with OAuth service",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [],
      "put": {
        "summary": "Gives partners ability to edit partner user's user_id, name and email.",
        "description": "August user id obtained from access token",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "userID": {
                  "description": "Partner user id",
                  "type": "string"
                },
                "name": {
                  "description": "String containing both first and last name",
                  "type": "string"
                },
                "email": {
                  "description": "Unverified email address",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/partners/user/verify": {
      "post": {
        "summary": "follows a specific flow of user identifier verifications, optionally creates a new user, and eventually signs-in the user",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "identifier type, \"email\" or \"phone\"",
                  "type": "string"
                },
                "value": {
                  "description": "user identifier value, an email address or phone number",
                  "type": "string"
                },
                "code": {
                  "description": "optional verification code for a previously provided identifier",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "auth_code": {
                      "description": "optional, oAuth authentication code is returned when the flow is completed successfully and indicates a signed-in user",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners/verify": {
      "post": {
        "summary": "Allows a partner to test whether a user with given identifiers exists. Responds with 200 if the user exists, 404 if not",
        "description": "We chose POST over GET so that we can have the partner provide an encrypted body payload",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "description": "email address",
                  "type": "string"
                },
                "phone": {
                  "description": "phone number, starting with +, followed by international country code, followed by phone number, numbers only",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners/tags": {
      "get": {
        "summary": "Retrives a list of tags and the partner IDs that have those tags",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tag": {
                        "description": "Tag Name",
                        "type": "string"
                      },
                      "appItems": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "0": {
                              "description": "I",
                              "type": "string"
                            },
                            "1": {
                              "description": "D",
                              "type": "string"
                            },
                            "2": {
                              "description": " ",
                              "type": "string"
                            },
                            "3": {
                              "description": "o",
                              "type": "string"
                            },
                            "4": {
                              "description": "f",
                              "type": "string"
                            },
                            "5": {
                              "description": " ",
                              "type": "string"
                            },
                            "6": {
                              "description": "f",
                              "type": "string"
                            },
                            "7": {
                              "description": "i",
                              "type": "string"
                            },
                            "8": {
                              "description": "r",
                              "type": "string"
                            },
                            "9": {
                              "description": "s",
                              "type": "string"
                            },
                            "10": {
                              "description": "t",
                              "type": "string"
                            },
                            "11": {
                              "description": " ",
                              "type": "string"
                            },
                            "12": {
                              "description": "p",
                              "type": "string"
                            },
                            "13": {
                              "description": "a",
                              "type": "string"
                            },
                            "14": {
                              "description": "r",
                              "type": "string"
                            },
                            "15": {
                              "description": "t",
                              "type": "string"
                            },
                            "16": {
                              "description": "n",
                              "type": "string"
                            },
                            "17": {
                              "description": "e",
                              "type": "string"
                            },
                            "18": {
                              "description": "r",
                              "type": "string"
                            },
                            "19": {
                              "description": " ",
                              "type": "string"
                            },
                            "20": {
                              "description": "p",
                              "type": "string"
                            },
                            "21": {
                              "description": "a",
                              "type": "string"
                            },
                            "22": {
                              "description": "r",
                              "type": "string"
                            },
                            "23": {
                              "description": "t",
                              "type": "string"
                            },
                            "24": {
                              "description": "n",
                              "type": "string"
                            },
                            "25": {
                              "description": "e",
                              "type": "string"
                            },
                            "26": {
                              "description": "r",
                              "type": "string"
                            },
                            "27": {
                              "description": " ",
                              "type": "string"
                            },
                            "28": {
                              "description": "w",
                              "type": "string"
                            },
                            "29": {
                              "description": "i",
                              "type": "string"
                            },
                            "30": {
                              "description": "t",
                              "type": "string"
                            },
                            "31": {
                              "description": "h",
                              "type": "string"
                            },
                            "32": {
                              "description": " ",
                              "type": "string"
                            },
                            "33": {
                              "description": "t",
                              "type": "string"
                            },
                            "34": {
                              "description": "h",
                              "type": "string"
                            },
                            "35": {
                              "description": "i",
                              "type": "string"
                            },
                            "36": {
                              "description": "s",
                              "type": "string"
                            },
                            "37": {
                              "description": " ",
                              "type": "string"
                            },
                            "38": {
                              "description": "t",
                              "type": "string"
                            },
                            "39": {
                              "description": "a",
                              "type": "string"
                            },
                            "40": {
                              "description": "g",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners/oauthurl": {
      "get": {
        "summary": "Get an OAuth URL to use with 3rd party APIs",
        "description": "partner information must be in the db and retrievable by partner_id or a 404 is returned.  unexpected platform gives a 4xx response.\nstate information is tied to the user ID, platform, and partnerID. That value persists for 5 minutes",
        "parameters": [
          {
            "name": "partnerID",
            "in": "query",
            "required": false,
            "schema": {
              "description": "string ID of partner",
              "type": "string"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "required": false,
            "schema": {
              "description": "string, 'ios' or 'android'",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "description": "string in OAuth 2.0 format:  containts a base url a stringified query args [client_id, redirect_uri, and state]",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners/:partnerID/mailinglist": {
      "post": {
        "summary": "Adds a given email to a partner mailing list.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "partnerID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "get": {
        "summary": "Returns an array of emails of a partner mailing list.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "partner": {
                        "description": "partner information",
                        "type": "string"
                      },
                      "emails": {
                        "description": "array of email addresses",
                        "type": "array"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/airbnb/listings": {
      "get": {
        "summary": "Returns an array of stripped down listing objects with lock associations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "airbnb id of listing",
                        "type": "string"
                      },
                      "name": {
                        "description": "display name of listing",
                        "type": "string"
                      },
                      "locks": {
                        "description": "array of lock IDs associated with this listing",
                        "type": "array"
                      },
                      "access": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "appAccess": {
                              "description": "boolean for do we allow app access for this listing",
                              "type": "boolean"
                            },
                            "keypadAccess": {
                              "description": "boolean for do we allow keypad access for this listing",
                              "type": "boolean"
                            },
                            "lockID": {
                              "description": "a lock ID that appears in the locks array",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/airbnb/listings/:listingID/locks/:lockID": {
      "put": {
        "summary": "pairs a lock and listing based on given parameter ids",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "keypadAccess": {
                  "description": "flag indicating if guests should have access via august keypad",
                  "type": "string"
                },
                "appAccess": {
                  "description": "flag indicating if guests should have access via august app",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "listingID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "de-pairs a lock and listing based on given parameter ids",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/airbnb/authtoken": {
      "post": {
        "summary": "associates the specified Airbnb authorization token with the calling user",
        "description": "creates the association if none exists, updates it if it does exist.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "access_token": {
                  "description": "Airbnb access token of user",
                  "type": "string"
                },
                "expires_at": {
                  "description": "Epoch timestamp",
                  "type": "string"
                },
                "refresh_token": {
                  "description": "Airbnb refresh token",
                  "type": "string"
                },
                "user_id": {
                  "description": "Airbnb user id",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/airbnb": {
      "delete": {
        "summary": "Removes Airbnb credentials for calling user",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/apps/:appID": {
      "delete": {
        "summary": "disconnects August App from app specified by appID for callingUser",
        "description": "if callingUser is not associated with the app specified, no error is returned",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "appID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/tokens/:appID": {
      "delete": {
        "summary": "Delete token for a given app",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "appID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "get": {
        "summary": "Get or generate a token for a given app",
        "description": "Current use: The subscription management web UI needs to retrieve some subscriptions related data. We do not want to have that web app access REST API directly. august-subscription-server has been created to provide the required data. To authenticate against august-subscription-server a temporary (30min) token will be used by the web app. The mobile clients will provide that token to the web app after requesting it from REST API.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/augustappversionok/:clientos/:clientversion": {
      "get": {
        "summary": "Checks whether the application needs an compulsary upgrade",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "clientos",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "clientversion",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/clientlogdata": {
      "post": {
        "summary": "Post client log data",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/logrequesttime": {
      "post": {
        "summary": "stores the specifice client serial ID, request time, and response time",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/private/locks/status/:lockID": {
      "put": {
        "summary": "Updates the status of a lock in the locks collection. Possible values 'locked,' 'unlocked,' 'unknown.'",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "get": {
        "summary": "Gets status of lock",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/private/locks/log/:lockID/:action": {
      "post": {
        "summary": "Creates a log entry per given post data; special handling for manual operation. Notifies listeners and issues push notifications to applicable parties.",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "action",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/:otherUserID": {
      "delete": {
        "summary": "Deletes user specified by otherUserID from doorbell specified by doorbellID",
        "description": "Returns Unauthorized if the calling user is not a user of the doorbell.Returns Not Found if doorbell or otherUserID do not exist.Returns PreconditionFailed if otherUserID is not a user of the doorbell",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/images": {
      "delete": {
        "summary": "Remove all Doorbell Images",
        "description": "This will return a 404 if doorbellID does not exist and a NotAuthorizedError if user is not a user of the doorbell",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/lock/:lockID": {
      "delete": {
        "summary": "Deletes a connection between a doorbell and a lock",
        "description": "This will return a 404 if doorbellID/lockID does not exist and a NotAuthorizedError if user is not a user of the doorbell",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "put": {
        "summary": "Creates a connection between a doorbell and a lock",
        "description": "This will return a 404 if doorbellID/lockID does not exist and a NotAuthorizedError if user is not a user of the doorbell",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/doorbells/:doorbellID/settings/user": {
      "put": {
        "summary": "Update Doorbell/User Settings",
        "description": "Must put the whole settings object.  Cannot update individual field",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "motion_notifications": {
                  "description": "Boolean",
                  "type": "boolean"
                },
                "buttonpush_notifications": {
                  "description": "Boolean",
                  "type": "boolean"
                },
                "notify_when_offline": {
                  "description": "Boolean",
                  "type": "boolean"
                },
                "etc": {
                  "description": "etc",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/users": {
      "put": {
        "summary": "Add doorbell users",
        "description": "Returns 404 if doorbell is not found.  Returns Not Authorized if calling user is not a user of the doorbell",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "0": {
                        "description": "A",
                        "type": "string"
                      },
                      "1": {
                        "description": "r",
                        "type": "string"
                      },
                      "2": {
                        "description": "r",
                        "type": "string"
                      },
                      "3": {
                        "description": "a",
                        "type": "string"
                      },
                      "4": {
                        "description": "y",
                        "type": "string"
                      },
                      "5": {
                        "description": " ",
                        "type": "string"
                      },
                      "6": {
                        "description": "o",
                        "type": "string"
                      },
                      "7": {
                        "description": "f",
                        "type": "string"
                      },
                      "8": {
                        "description": " ",
                        "type": "string"
                      },
                      "9": {
                        "description": "u",
                        "type": "string"
                      },
                      "10": {
                        "description": "s",
                        "type": "string"
                      },
                      "11": {
                        "description": "e",
                        "type": "string"
                      },
                      "12": {
                        "description": "r",
                        "type": "string"
                      },
                      "13": {
                        "description": " ",
                        "type": "string"
                      },
                      "14": {
                        "description": "i",
                        "type": "string"
                      },
                      "15": {
                        "description": "d",
                        "type": "string"
                      },
                      "16": {
                        "description": "e",
                        "type": "string"
                      },
                      "17": {
                        "description": "n",
                        "type": "string"
                      },
                      "18": {
                        "description": "t",
                        "type": "string"
                      },
                      "19": {
                        "description": "i",
                        "type": "string"
                      },
                      "20": {
                        "description": "f",
                        "type": "string"
                      },
                      "21": {
                        "description": "i",
                        "type": "string"
                      },
                      "22": {
                        "description": "e",
                        "type": "string"
                      },
                      "23": {
                        "description": "r",
                        "type": "string"
                      },
                      "24": {
                        "description": "s",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/settings/doorbell": {
      "put": {
        "summary": "Update Doorbell Settings using presets or custom body with settings",
        "description": "Can update individual field \nstatus code 409 if powerProfilePreset is an invalid preset",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "powerProfilePreset": {
                  "description": "[optional] override settings: \n[pirSensitivity, videoResolution, nightModeAlsThreshold, irLedBrightness] with presets.  If passed, must be a valid value. \nThe only valid value for this is the integer 0 and -1 (which custom and will be ignored)",
                  "type": "string"
                },
                "setting1": {
                  "description": "type of setting 1",
                  "type": "string"
                },
                "etc": {
                  "description": "type of etc",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/videoevent": {
      "get": {
        "summary": "Gets a temporary viewable URL for archived video",
        "description": "returns UnauthorizedError if the user is not of that doorbell.  Returns 404 if m3u file is not found.  Returns 401 if no DVR subscription is found.  Returns 404 if video is unavailable in activity log",
        "parameters": [
          {
            "name": "dvrID",
            "in": "query",
            "required": false,
            "schema": {
              "description": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "description": "string",
                      "type": "string"
                    },
                    "videoExpiresAt": {
                      "description": "number",
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/videoevent/:eventID": {
      "get": {
        "summary": "Gets a temporary viewable URL for archived video",
        "description": " This endpoint is the same (has the same middleware) as GET /doorbells/:doorbellID/videoevent except it uses activitylog Object ID instead of dvrID when querying the database.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "description": "string",
                      "type": "string"
                    },
                    "videoExpiresAt": {
                      "description": "number",
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "eventID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/rtsp_url": {
      "get": {
        "summary": "Gets proxy information for Alexa to view a stream",
        "description": "returns UnauthorizedError if the user is not of that doorbell.  Endpoint responds in 5 seconds or times out",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "proxyIP": {
                      "description": "string",
                      "type": "string"
                    },
                    "session": {
                      "description": "string",
                      "type": "string"
                    },
                    "deviceIP": {
                      "description": "string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/video/:dvrID": {
      "get": {
        "summary": "Gets a temporary viewable URL for a downloadable video",
        "description": "Returns a 202 if no errors are thrown.  Returns UnauthorizedError if the user is not of that doorbell or if the doorbell does not have a DVR subscription.  Returns 404 if the doorbellID or dvrID do not exist.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "schema": {
              "description": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transactionID": {
                      "description": "string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "dvrID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/calls/:callID/image": {
      "get": {
        "summary": "Returns the snapshot associated with a doorbell call",
        "description": "returns UnauthorizedError if the video does not belong to that doorbell or if the user is not of that doorbell",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imageUrl": {
                      "description": "string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "callID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/ivservers": {
      "get": {
        "summary": "(TEMPORARY)",
        "description": "does a redirect",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/doorbells/:houseID": {
      "post": {
        "summary": "Adds a doorbell to a house.",
        "description": "the pin returned might be different than the one requested if it was already used.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "serialNumber": {
                  "description": "serialNumber of the doorbell",
                  "type": "string"
                },
                "name": {
                  "description": "name of the doorbell",
                  "type": "string"
                },
                "type": {
                  "description": "string.  doorbell type",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "serialNumber",
            "name",
            "type"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "doorbellID": {
                      "description": "unique ID of doorbell, the client will use this ID for all subsequent transactions",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/videoevent/share": {
      "post": {
        "summary": "Shares a DVR Video With August Marketing",
        "description": "Returns 404 if HLS video stream is unavailable",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "description": "string",
                  "type": "string"
                },
                "dvrID": {
                  "description": "string",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "description",
            "dvrID"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/avsession/:action": {
      "post": {
        "summary": "Application hits this endpoint when they want to join, leave, or heartbeat for an AV Session related to a doorbell press or IR sensor.",
        "description": "Valid actions are ['heartbeat' 'join', 'leave', 'status'].Only 1 user is allowed to respond to the doorbell press.  Otherwise a ConflictError (409) is sent back.When a user responds a pubnub message is sent to the other listeners to disable their response capability on the client.In the event that this API is not called with a hangup or heartbeat (client power or connection failure) the call will be ended when the key expiresWhen a call is hung up, an object called callStats is expected in the request body.videoAvailable flag is only present for 'respond'",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "object",
                      "properties": {
                        "videoAvailable": {
                          "description": "boolean",
                          "type": "boolean"
                        },
                        "started": {
                          "description": "int",
                          "type": "integer"
                        },
                        "callID": {
                          "description": "string",
                          "type": "string"
                        },
                        "dvrID": {
                          "description": "string",
                          "type": "string"
                        },
                        "<userID1>": {
                          "description": "array of objects.  objects are keyed by action (join or leave) and value is a number of when they did it",
                          "type": "array"
                        },
                        "numUsersOnCall": {
                          "description": "int",
                          "type": "integer"
                        },
                        "initiated_user": {
                          "description": "string if a user started the call",
                          "type": "string"
                        },
                        "answered_user": {
                          "description": "string if a call was started by the doorbell",
                          "type": "string"
                        },
                        "image": {
                          "description": "object if image has been uploaded already",
                          "type": "object"
                        }
                      }
                    },
                    "join": {
                      "type": "object",
                      "properties": {
                        "started": {
                          "description": "int",
                          "type": "integer"
                        },
                        "callID": {
                          "description": "string",
                          "type": "string"
                        },
                        "dvrID": {
                          "description": "string",
                          "type": "string"
                        },
                        "<userID1>": {
                          "description": "array of objects.  objects are keyed by action (join or leave) and value is a number of when they did it",
                          "type": "array"
                        },
                        "numUsersOnCall": {
                          "description": "int",
                          "type": "integer"
                        },
                        "initiated_user": {
                          "description": "string if a user started the call",
                          "type": "string"
                        },
                        "answered_user": {
                          "description": "string if a call was started by the doorbell",
                          "type": "string"
                        },
                        "image": {
                          "description": "object if image has been uploaded already",
                          "type": "object"
                        }
                      }
                    },
                    "leave": {
                      "type": "object",
                      "properties": {
                        "started": {
                          "description": "int",
                          "type": "integer"
                        },
                        "callID": {
                          "description": "string",
                          "type": "string"
                        },
                        "dvrID": {
                          "description": "string",
                          "type": "string"
                        },
                        "<userID1>": {
                          "description": "array of objects.  objects are keyed by action (join or leave) and value is a number of when they did it",
                          "type": "array"
                        },
                        "numUsersOnCall": {
                          "description": "int",
                          "type": "integer"
                        },
                        "initiated_user": {
                          "description": "string if a user started the call",
                          "type": "string"
                        },
                        "answered_user": {
                          "description": "string if a call was started by the doorbell",
                          "type": "string"
                        },
                        "image": {
                          "description": "object if image has been uploaded already",
                          "type": "object"
                        }
                      }
                    },
                    "heartbeat": {
                      "type": "object",
                      "properties": {
                        "started": {
                          "description": "int",
                          "type": "integer"
                        },
                        "callID": {
                          "description": "string",
                          "type": "string"
                        },
                        "dvrID": {
                          "description": "string",
                          "type": "string"
                        },
                        "<userID1>": {
                          "description": "array of objects.  objects are keyed by action (join or leave) and value is a number of when they did it",
                          "type": "array"
                        },
                        "numUsersOnCall": {
                          "description": "int",
                          "type": "integer"
                        },
                        "initiated_user": {
                          "description": "string if a user started the call",
                          "type": "string"
                        },
                        "answered_user": {
                          "description": "string if a call was started by the doorbell",
                          "type": "string"
                        },
                        "image": {
                          "description": "object if image has been uploaded already",
                          "type": "object"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "action",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/event/:eventType": {
      "post": {
        "summary": "Generates a pubnub message when a doorbell is pressed or motion is detected.  An image is taken from the camera and sent in another pubnub message to the doorbell user",
        "description": "THIS FUNCTION WAS MOVED TO THE MARS API SERVER.  POSTing to /doorbells/:doorbellID/event/:eventType will upload the image taken from the camera in the body and send the url of the image in the pubnub message image for the other user.  eventType is either 'presence' or 'buttonpush'.  doorbellID is also required in params",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "eventType",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/adduser/:otherUserID": {
      "put": {
        "summary": "adds a user to a doorbell",
        "description": "If the doorbell or other user doesn't exist return ResourceNotFound error.  If calling user is not a user of the doorbell return NotAuthorizedError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/reboot": {
      "put": {
        "summary": "Publishes a message so the doorbell knows to reboot",
        "description": "If the doorbell or other user doesn't exist return ResourceNotFound error.  If calling user is not a user of the doorbell return NotAuthorizedError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/wakeup": {
      "put": {
        "summary": "Publishes a message so the doorbell knows to wakeup",
        "description": "If the doorbell or other user doesn't exist return ResourceNotFound error.  If calling user is not a user of the doorbell return NotAuthorizedError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/log": {
      "post": {
        "summary": "Writes to the logs",
        "description": "If the doorbell or other user doesn't exist return ResourceNotFound error.If calling user is not a user of the doorbell return NotAuthorizedError.Takes an array of log objects or a log object in the body of the request.",
        "requestBody": {
          "content": {}
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/unverifiedusers": {
      "post": {
        "summary": "Creates an unverified user for a given pin and lock",
        "description": "if the pin is already used this request will fail and return a 409",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "lockID": {
                  "description": "the lock this user is associated with",
                  "type": "string"
                },
                "pin": {
                  "description": "the pin requested for this user",
                  "type": "string"
                },
                "firstName": {
                  "description": "first name",
                  "type": "string"
                },
                "lastName": {
                  "description": "last name",
                  "type": "string"
                },
                "phone": {
                  "description": "phone number (E.164 spec)",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "lockID",
            "pin"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "the id of the unverified user",
                      "type": "string"
                    },
                    "firstName": {
                      "description": "the firstName passed as a param",
                      "type": "string"
                    },
                    "lastName": {
                      "description": "the lastName passed as params",
                      "type": "string"
                    },
                    "pin": {
                      "description": "the pin for this user",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/unverifiedusers/:unverifiedUserID": {
      "put": {
        "summary": "Updates an unverified user associated with a lock",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "lockID": {
                  "description": "the id of the lock associated with the unverified user",
                  "type": "string"
                },
                "firstName": {
                  "description": "the first name of the unverified user to update",
                  "type": "string"
                },
                "lastName": {
                  "description": "the last name of the unverified user to update",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "lockID"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "unverifiedUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/pin/:pin": {
      "delete": {
        "summary": "deletes a reserved pin",
        "description": "the call will be successful, if the pin had already been expired or doesn't exists",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "pin",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/homekitkey": {
      "get": {
        "summary": "Returns homekit key for given lock and calling user.",
        "description": "/! DEPRECATED: 410 GoneError",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/users/:otherUserID/pin": {
      "put": {
        "summary": "Creates or change the pin on the specified lock for the specified user",
        "description": "created: means that the PIN should be loaded onto the lock, first step of associating a pin loaded: means that the PIN has been loaded to the lock, second and final step of associating a pin deleting: means that the PIN should be deleted, first step of removing a pin from a lock deleted: means that the PIN has been be deleted from the lock disabling: means the the PIN should be disabled disabled: means that the PIN has been marked as disabled on the lock enabling: means that the PIN should be enabled enabled: means that the PIN has been enabled, which means that it is back in the loaed group of PINs. The PIN is only necessary when creating it",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "pin": {
                  "description": "the pin",
                  "type": "string"
                },
                "state": {
                  "description": "the state of the pin, which can be 'created','loaded','deleted','disabling','disabled'",
                  "type": "string"
                },
                "firstName": {
                  "description": "the firstName of the user, optional",
                  "type": "string"
                },
                "lastName": {
                  "description": "the lastName of the user, optional",
                  "type": "string"
                },
                "accessType": {
                  "description": "string: the type of the pin: always, recurring, temporary, oneTime",
                  "type": "string"
                },
                "accessTimes": {
                  "description": "string: this field only required for access types recurring & temporary; for recurring access type possible values are \"STARTSEC=<sec from start of day>[;ENDSEC=<sec from start of day>]\"; if timezone of lock is known this is also valid: \"DTSTART=<ISO date in UTC>[;DTEND=<ISO date in UTC>]\" (end date optional, if not provided is set to 1 hour from start date). For temporary times must be ISO date in UTC. Not required when schedule is provided.",
                  "type": "string"
                },
                "accessRecurrence": {
                  "description": "string: only required for access type recurring. See recurrence rules under RFC2445, e.g.: \"FREQ=MONTHLY;BYMONTHDAY=10,15;COUNT=20\". Not required when schedule is provided.",
                  "type": "string"
                },
                "schedule": {
                  "description": "string: iCal data format following RFC5545 (https://tools.ietf.org/html/rfc5545) required for access types recurring & temporary; when accessTimes & accessRecurrence are provided, data of schedule overrides their values.",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "pin",
            "state",
            "firstName",
            "lastName",
            "accessType",
            "accessTimes",
            "accessRecurrence",
            "schedule"
          ]
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/users/:otherUserID/credentials": {
      "put": {
        "summary": "Creates or change the pin/rf/finger on the specified lock for the specified user",
        "description": "created: means that the PIN should be loaded onto the lock, first step of associating a pin loaded: means that the PIN has been loaded to the lock, second and final step of associating a pin deleting: means that the PIN should be deleted, first step of removing a pin from a lock deleted: means that the PIN has been be deleted from the lock disabling: means the the PIN should be disabled disabled: means that the PIN has been marked as disabled on the lock enabling: means that the PIN should be enabled enabled: means that the PIN has been enabled, which means that it is back in the loaed group of PINs. The 'pin' is only necessary when type euqals pin & create it. this is going to replace 'PUT /locks/:lockID/users/:otherUserID/pin'",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "description": "string: pin, rf, finger",
                  "type": "string"
                },
                "pin": {
                  "description": "the pin",
                  "type": "string"
                },
                "action": {
                  "description": "the action of operation, which can be 'intent', 'commit'",
                  "type": "string"
                },
                "state": {
                  "description": "the state of the pin/rf/finger, which can be 'load','enable','disable','delate','update'",
                  "type": "string"
                },
                "slot": {
                  "description": "the slot",
                  "type": "string"
                },
                "firstName": {
                  "description": "the firstName of the user",
                  "type": "string"
                },
                "lastName": {
                  "description": "the lastName of the user",
                  "type": "string"
                },
                "accessType": {
                  "description": "string: the type of the pin/rf/finger: 'always', 'recurring', 'temporary', 'oneTime', the default value is 'always'",
                  "type": "string"
                },
                "accessTimes": {
                  "description": "string: this field only required for access types recurring & temporary; for recurring access type possible values are \"STARTSEC=<sec from start of day>[;ENDSEC=<sec from start of day>]\"; if timezone of lock is known this is also valid: \"DTSTART=<ISO date in UTC>[;DTEND=<ISO date in UTC>]\" (end date optional, if not provided is set to 1 hour from start date). For temporary times must be ISO date in UTC. Not required when schedule is provided.",
                  "type": "string"
                },
                "accessRecurrence": {
                  "description": "string: only required for access type recurring. See recurrence rules under RFC2445, e.g.: \"FREQ=MONTHLY;BYMONTHDAY=10,15;COUNT=20\". Not required when schedule is provided.",
                  "type": "string"
                },
                "schedule": {
                  "description": "string: iCal data format following RFC5545 (https://tools.ietf.org/html/rfc5545) required for access types recurring & temporary; when accessTimes & accessRecurrence are provided, data of schedule overrides their values.",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "type",
            "pin",
            "action",
            "state"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "description": "array of the unique lock & user which state is created",
                      "type": "array"
                    },
                    "loaded": {
                      "description": "array of the unique lock & user which state is loaded",
                      "type": "array"
                    },
                    "disabled": {
                      "description": "array of the unique lock & user which state is disabled",
                      "type": "array"
                    },
                    "disabling": {
                      "description": "array of the unique lock & user which state is disabling",
                      "type": "array"
                    },
                    "enabling": {
                      "description": "array of the unique lock & user which state is enabling",
                      "type": "array"
                    },
                    "deleting": {
                      "description": "array of the unique lock & user which state is deleting",
                      "type": "array"
                    },
                    "updating": {
                      "description": "array of the unique lock & user which state is updating",
                      "type": "array"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "otherUserID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/private/locks/timeadjustment/:lockID/:realtime/:locktime": {
      "put": {
        "summary": "Inform server of time adjustment for a lock",
        "description": "When a mobile device detects the clock on the lock is out of sync, it sets the time and informs the server of the adjustment.  Returns authorization error if callingUser is not able to use lock.  Returns success otherwise.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "realtime",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "locktime",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nest/cameras": {
      "get": {
        "summary": "returns all nest cameras that can be associated with a lock",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/nest/camera": {
      "post": {
        "summary": "adds a nest camera to the system and associates it with the house represented by the camera's Nest structure",
        "description": "The camera ID in the response is the id to be used in all other August camera-related APIs. This is is NOT the Nest camera ID",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "name field returned in response to GET /nest/cameras",
                  "type": "string"
                },
                "device_id": {
                  "description": "device_id returned in response to GET /nest/cameras",
                  "type": "string"
                },
                "structure_id": {
                  "description": "structure_id returned in response to GET /nest/cameras",
                  "type": "string"
                },
                "name_long": {
                  "description": "name_long returned in response to GET /nest/cameras",
                  "type": "string"
                },
                "web_url": {
                  "description": "web_url returned in response to GET /nest/cameras",
                  "type": "string"
                },
                "app_url": {
                  "description": "app_url returned in response to GET /nest/cameras",
                  "type": "string"
                }
              }
            }
          },
          "required": [
            "name",
            "device_id",
            "structure_id",
            "name_long",
            "web_url",
            "app_url"
          ]
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "CameraID": {
                      "description": "August ID of camera",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/locks/:lockID/cameras/:cameraID": {
      "put": {
        "summary": "Associates camera specified by cameraID with lock specified by lockID.",
        "description": "A camera can be associated with multiple locks, but those locks must be in the same house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "cameraID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Disassociates camera specified by cameraID from lock specified by lockID",
        "description": "Does not disassociate the camera from the house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/doorbells/:doorbellID/cameras/:cameraID": {
      "put": {
        "summary": "Associates camera specified by cameraID with doorbell specified by doorbellID.",
        "description": "A camera can be associated with multiple doorbells, but those doorbells must be in the same house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "cameraID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Disassociates camera specified by cameraID from doorbell specified by doorbellID",
        "description": "Does not disassociate the camera from the house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/locks/cameras/:lockID/:cameraID": {
      "post": {
        "summary": "Associates camera specified by cameraID with a lock specified by lockID",
        "description": "A camera can be associated with multiple locks, but those locks must be in the same house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "cameraID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Disassociates camera specified by cameraID from lock specified by lockID",
        "description": "does not disassociate the camera from the house",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/cameras/:cameraID": {
      "delete": {
        "summary": "deletes camera specified by cameraID and removes its association with house and locks",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "cameraID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/locks/:lockID/timezone": {
      "put": {
        "summary": "Returns the timezones hour offset from UTC",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "zone": {
                  "description": "timezone string e.g. America/Los_Angeles",
                  "type": "string"
                },
                "time": {
                  "description": "optional parameter to manually set the time to convert",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timeZoneOffsetInitial": {
                      "description": "timezone offset measured in 15 minute intervals",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/avsession/token": {
      "get": {
        "summary": "Returns token information given a doorbell id",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customerID": {
                      "description": "customer id",
                      "type": "string"
                    },
                    "session": {
                      "description": "session token",
                      "type": "string"
                    },
                    "expiresAt": {
                      "description": "unix timestamp when redis key expires",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/subscriptions/plans": {
      "get": {
        "summary": "Returns subscription plan details",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "planID": {
                        "description": "internal database object ID",
                        "type": "string"
                      },
                      "planCode": {
                        "description": "plan code",
                        "type": "string"
                      },
                      "name": {
                        "description": "plan name",
                        "type": "string"
                      },
                      "description": {
                        "description": "more detailed description",
                        "type": "string"
                      },
                      "createdAt": {
                        "description": "date when the plan was created",
                        "type": "string"
                      },
                      "updatedAt": {
                        "description": "date when the plan was last updated",
                        "type": "string"
                      },
                      "planIntervalLength": {
                        "description": "number of days or months for the length of the plan",
                        "type": "number"
                      },
                      "planIntervalUnit": {
                        "description": "months, days, ...",
                        "type": "string"
                      },
                      "currencies": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "currencyCode": {
                              "description": "currency short code",
                              "type": "string"
                            },
                            "unitAmountInCents": {
                              "description": "plan price in the currency's one-hundredth subdivision unit",
                              "type": "string"
                            },
                            "setupFeeInCents": {
                              "description": "setup fee in the currency's one-hundredth subdivision unit",
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/subscriptions/plans/:planID": {
      "get": {
        "summary": "Returns subscription plan details for a single plan",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "planID": {
                      "description": "internal database object ID",
                      "type": "string"
                    },
                    "planCode": {
                      "description": "plan code",
                      "type": "string"
                    },
                    "name": {
                      "description": "plan name",
                      "type": "string"
                    },
                    "description": {
                      "description": "more detailed description",
                      "type": "string"
                    },
                    "createdAt": {
                      "description": "date when the plan was created",
                      "type": "string"
                    },
                    "updatedAt": {
                      "description": "date when the plan was last updated",
                      "type": "string"
                    },
                    "planIntervalLength": {
                      "description": "number of days or months for the length of the plan",
                      "type": "number"
                    },
                    "planIntervalUnit": {
                      "description": "months, days, ...",
                      "type": "string"
                    },
                    "currencies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "currencyCode": {
                            "description": "currency short code",
                            "type": "string"
                          },
                          "unitAmountInCents": {
                            "description": "plan price in the currency's one-hundredth subdivision unit",
                            "type": "string"
                          },
                          "setupFeeInCents": {
                            "description": "setup fee in the currency's one-hundredth subdivision unit",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "planID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/subscriptions": {
      "get": {
        "summary": "Returns subscriptions the calling user has access to",
        "description": "Returns device-level subscription.accepts GET parameters deviceType and deviceID to filter for a specific subscription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "subscriptionID": {
                        "description": "subscription ID",
                        "type": "string"
                      },
                      "userID": {
                        "description": "subscription manager user ID",
                        "type": "string"
                      },
                      "type": {
                        "description": "type of subscription",
                        "type": "string"
                      },
                      "status": {
                        "description": "trial/paid/invalid",
                        "type": "string"
                      },
                      "deviceType": {
                        "description": "device",
                        "type": "string"
                      },
                      "deviceID": {
                        "description": "device ID",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/subscriptions/:subscriptionID": {
      "get": {
        "summary": "Return a subscription object",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscriptionID": {
                      "description": "subscription ID",
                      "type": "string"
                    },
                    "userID": {
                      "description": "subscription manager user ID",
                      "type": "string"
                    },
                    "type": {
                      "description": "type of subscription",
                      "type": "string"
                    },
                    "status": {
                      "description": "trial/paid/invalid",
                      "type": "string"
                    },
                    "deviceType": {
                      "description": "device",
                      "type": "string"
                    },
                    "deviceID": {
                      "description": "device ID",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "subscriptionID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Cancels a subscription",
        "description": "Can be used with any type of subscription, trial or paid",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/subscriptions/:subscriptionID/enable": {
      "put": {
        "summary": "Allows to re-enable a subscription",
        "description": "Can be used with any type of subscription, trial or paid. Subscription must exist already.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "subscriptionID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nock/add/:scopeID": {
      "put": {
        "summary": "Used to add a ruleset to nock",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "hostString": {
                  "description": "A nock style host string, i.e., https://api.august.com",
                  "type": "string"
                },
                "functions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "The name of the nock method to call",
                        "type": "string"
                      },
                      "arguments": {
                        "description": "An array of arguments to pass to the method",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "scopeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nock/cleanAll": {
      "get": {
        "summary": "Removes all nock rules",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/nock/pendingMocks/:scopeID": {
      "get": {
        "summary": "Returns any mocks that have not been used",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mocks": {
                      "description": "An array of mocks not used",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "scopeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nock/isDone/:scopeID": {
      "get": {
        "summary": "Returns a boolean indicating whether all of the mocks have been used",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isDone": {
                      "description": "Boolean indicating if all mocks have been used",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "scopeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/nock/simulate": {
      "post": {
        "summary": "Runs a HTTP request from the server which may or may not use nock",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "hostString": {
                  "description": "The nock style host string",
                  "type": "string"
                },
                "path": {
                  "description": "The path to call",
                  "type": "string"
                },
                "method": {
                  "description": "The HTTP method to use, i.e., GET, POST, etc.",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "parameters": []
    },
    "/homeaccess/lockeligibility": {
      "get": {
        "summary": "Get list of calling user's locks, their eligibility, and missing devices for August Access",
        "description": "Returns an empty body if the calling user has no eligible locks",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "lockID": {
                        "description": "lock ID",
                        "type": "string"
                      },
                      "lockName": {
                        "description": "name of lock",
                        "type": "string"
                      },
                      "houseID": {
                        "description": "ID of house to which lock belongs",
                        "type": "string"
                      },
                      "houseName": {
                        "description": "Name of house to which lock belongs",
                        "type": "string"
                      },
                      "isEligible": {
                        "description": "boolean",
                        "type": "boolean"
                      },
                      "accessories": {
                        "description": "map of devices -> true/false for available/not available; devices: bridge, doorbell, indoorCamera, keypad",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/homeaccess/locks": {
      "get": {
        "summary": "Called by August Access seller/retailer partners with a parameter list of shippers/home accessing partner/access grantees to get a list of locks that match each grantees requirements (remote access/PIN)",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "grantees": {
                      "type": "object",
                      "properties": {
                        "granteeID1": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "l",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "c",
                                "type": "string"
                              },
                              "3": {
                                "description": "k",
                                "type": "string"
                              },
                              "4": {
                                "description": "I",
                                "type": "string"
                              },
                              "5": {
                                "description": "D",
                                "type": "string"
                              },
                              "6": {
                                "description": "1",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "granteeID2": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "l",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "c",
                                "type": "string"
                              },
                              "3": {
                                "description": "k",
                                "type": "string"
                              },
                              "4": {
                                "description": "I",
                                "type": "string"
                              },
                              "5": {
                                "description": "D",
                                "type": "string"
                              },
                              "6": {
                                "description": "1",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "locks": {
                      "type": "object",
                      "properties": {
                        "lockID1": {
                          "type": "object",
                          "properties": {
                            "lockName": {
                              "description": "foo lock",
                              "type": "string"
                            },
                            "houseName": {
                              "description": "foo house",
                              "type": "string"
                            }
                          }
                        },
                        "lockID2": {
                          "type": "object",
                          "properties": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/homeaccess/user/legal": {
      "put": {
        "summary": "Accepts August access terms of service agreement(aaTos) for a user",
        "description": "This will only approve home access legal docs like aaTos",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "approved": {
                  "description": "boolean: true or false",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/homeaccess/lock/:lockID": {
      "put": {
        "summary": "Allows one to set the delivery property of a lock",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "deliveryAllowed": {
                  "description": "boolean: true or false",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/homeaccess/delivery/:houseId/:deliveryId": {
      "get": {
        "summary": "Gets a single delivery using a provided deliveryId for a house",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deliveryId": {
                      "description": "delivery id",
                      "type": "string"
                    },
                    "type": {
                      "description": "Enum(\"IN_HOME\", \"STANDARD\")",
                      "type": "string"
                    },
                    "status": {
                      "description": "current status of the delivery",
                      "type": "string"
                    },
                    "deliveryWindow": {
                      "description": "delivery eta (iCal)",
                      "type": "string"
                    },
                    "accessPartner": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "partner name",
                          "type": "string"
                        },
                        "imageUrl": {
                          "description": "partners image url",
                          "type": "string"
                        }
                      }
                    },
                    "courier": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "description": "courier name",
                          "type": "string"
                        },
                        "imageUrl": {
                          "description": "courier image url",
                          "type": "string"
                        }
                      }
                    },
                    "instructions": {
                      "description": "delivery instructions (limited to 256 characters)",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "houseId",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "deliveryId",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/homeaccess/token/:lockID": {
      "post": {
        "summary": "Called by August Access seller partners with a lock ID to create a home-access-token for a shipping partner",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "orderID": {
                  "description": "Order identifier from Retailer",
                  "type": "string"
                },
                "trackingID": {
                  "description": "Visit identifier from Access Grantee",
                  "type": "string"
                },
                "accessGranteeID": {
                  "description": "August-assigned identifier of Access Grantee",
                  "type": "string"
                },
                "accessDateRange": {
                  "description": "iCal format DTSTART; DTEND",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "homeAccessToken": {
                      "description": "opaque string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "lockID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Allows a retailer/seller partner to revoke a Home-Access-Token",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/homeaccess/partners/access": {
      "get": {
        "summary": "Called by August Access seller partners to list August Access delivery providers",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "deliveryProviderID": {
                        "description": "The ID of the delivery provider",
                        "type": "string"
                      },
                      "name": {
                        "description": "Delivery provider's name",
                        "type": "string"
                      },
                      "logoURL": {
                        "description": "Delivery providers's logo URL",
                        "type": "string"
                      },
                      "providerURL": {
                        "description": "Delivery providers's URL",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/homeaccess/access/:command": {
      "put": {
        "summary": "Called by August Access access partners with a Home-Access-Token to unlock/lock a lock",
        "description": "command can be [lock|unlock]",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "command",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/homeaccess/access/status": {
      "get": {
        "summary": "Called by August Access access partners with a Home-Access-Token to get its status",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/homeaccess/deliveries/:window": {
      "get": {
        "summary": "Called by the mobile app to list upcoming or past deliveries for an August Access user",
        "description": "window can be [current|past] to list current/upcoming or past deliveries, respectively",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "sellerPartnerID": {
                        "description": "Seller partner ID",
                        "type": "string"
                      },
                      "accessPartnerID": {
                        "description": "Access partner ID",
                        "type": "string"
                      },
                      "lockID": {
                        "description": "Lock ID",
                        "type": "string"
                      },
                      "userID": {
                        "description": "User ID of the user receiving the delivery",
                        "type": "string"
                      },
                      "accessStart": {
                        "description": "Access start time",
                        "type": "string"
                      },
                      "accessEnd": {
                        "description": "Access end time",
                        "type": "string"
                      },
                      "orderID": {
                        "description": "Order identifier from Retailer",
                        "type": "string"
                      },
                      "orderUrl": {
                        "description": "URL showing details of the order",
                        "type": "string"
                      },
                      "trackingID": {
                        "description": "Visit identifier from Access Grantee",
                        "type": "string"
                      },
                      "trackingUrl": {
                        "description": "Tracking URL for the order",
                        "type": "string"
                      },
                      "houseID": {
                        "description": "House ID",
                        "type": "string"
                      },
                      "accessPartnerName": {
                        "description": "Access partner name",
                        "type": "string"
                      },
                      "accessPartnerLogoURL": {
                        "description": "Access partner logo URL",
                        "type": "string"
                      },
                      "sellerPartnerName": {
                        "description": "Seller partner name",
                        "type": "string"
                      },
                      "sellerPartnerLogoURL": {
                        "description": "Seller partner logo URL",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/partners/ujet/auth": {
      "post": {
        "summary": "Called by an authenticated user to generate a JWT for UJet end user authentication",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "description": "<string: JWT>",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/partners/ujet/sign": {
      "post": {
        "summary": "Called by an authenticated user to generate jwt for custom data",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "banana": {
                  "description": "phone",
                  "type": "string"
                },
                "blueberry": {
                  "description": "spice head",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "description": "<string: JWT>",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/credentials": {
      "get": {
        "summary": "Called by an authenticated user to get all the credentials needed for mobile clients",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "turn": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "description": "turn user",
                          "type": "string"
                        },
                        "password": {
                          "description": "turn password",
                          "type": "string"
                        },
                        "stunServers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "h",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "s",
                                "type": "string"
                              },
                              "3": {
                                "description": "t",
                                "type": "string"
                              },
                              "4": {
                                "description": "0",
                                "type": "string"
                              },
                              "5": {
                                "description": ":",
                                "type": "string"
                              },
                              "6": {
                                "description": "p",
                                "type": "string"
                              },
                              "7": {
                                "description": "o",
                                "type": "string"
                              },
                              "8": {
                                "description": "r",
                                "type": "string"
                              },
                              "9": {
                                "description": "t",
                                "type": "string"
                              },
                              "10": {
                                "description": "0",
                                "type": "string"
                              }
                            }
                          }
                        },
                        "turnServers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "0": {
                                "description": "h",
                                "type": "string"
                              },
                              "1": {
                                "description": "o",
                                "type": "string"
                              },
                              "2": {
                                "description": "s",
                                "type": "string"
                              },
                              "3": {
                                "description": "t",
                                "type": "string"
                              },
                              "4": {
                                "description": "0",
                                "type": "string"
                              },
                              "5": {
                                "description": ":",
                                "type": "string"
                              },
                              "6": {
                                "description": "p",
                                "type": "string"
                              },
                              "7": {
                                "description": "o",
                                "type": "string"
                              },
                              "8": {
                                "description": "r",
                                "type": "string"
                              },
                              "9": {
                                "description": "t",
                                "type": "string"
                              },
                              "10": {
                                "description": "0",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "ujet_key": {
                      "description": "ujet api key",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/devices": {
      "get": {
        "summary": "Get a list of calling user's devices.",
        "description": "Returns a device type key and empty array if the calling user has no devices of that type.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "0": {
                            "description": "<",
                            "type": "string"
                          },
                          "1": {
                            "description": "l",
                            "type": "string"
                          },
                          "2": {
                            "description": "o",
                            "type": "string"
                          },
                          "3": {
                            "description": "c",
                            "type": "string"
                          },
                          "4": {
                            "description": "k",
                            "type": "string"
                          },
                          "5": {
                            "description": "I",
                            "type": "string"
                          },
                          "6": {
                            "description": "D",
                            "type": "string"
                          },
                          "7": {
                            "description": "s",
                            "type": "string"
                          },
                          "8": {
                            "description": ">",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "doorbells": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "0": {
                            "description": "<",
                            "type": "string"
                          },
                          "1": {
                            "description": "d",
                            "type": "string"
                          },
                          "2": {
                            "description": "o",
                            "type": "string"
                          },
                          "3": {
                            "description": "o",
                            "type": "string"
                          },
                          "4": {
                            "description": "r",
                            "type": "string"
                          },
                          "5": {
                            "description": "b",
                            "type": "string"
                          },
                          "6": {
                            "description": "e",
                            "type": "string"
                          },
                          "7": {
                            "description": "l",
                            "type": "string"
                          },
                          "8": {
                            "description": "l",
                            "type": "string"
                          },
                          "9": {
                            "description": "I",
                            "type": "string"
                          },
                          "10": {
                            "description": "D",
                            "type": "string"
                          },
                          "11": {
                            "description": "s",
                            "type": "string"
                          },
                          "12": {
                            "description": ">",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "keypads": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "0": {
                            "description": "<",
                            "type": "string"
                          },
                          "1": {
                            "description": "k",
                            "type": "string"
                          },
                          "2": {
                            "description": "e",
                            "type": "string"
                          },
                          "3": {
                            "description": "y",
                            "type": "string"
                          },
                          "4": {
                            "description": "p",
                            "type": "string"
                          },
                          "5": {
                            "description": "a",
                            "type": "string"
                          },
                          "6": {
                            "description": "d",
                            "type": "string"
                          },
                          "7": {
                            "description": "I",
                            "type": "string"
                          },
                          "8": {
                            "description": "D",
                            "type": "string"
                          },
                          "9": {
                            "description": "s",
                            "type": "string"
                          },
                          "10": {
                            "description": ">",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "bridges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "0": {
                            "description": "<",
                            "type": "string"
                          },
                          "1": {
                            "description": "b",
                            "type": "string"
                          },
                          "2": {
                            "description": "r",
                            "type": "string"
                          },
                          "3": {
                            "description": "i",
                            "type": "string"
                          },
                          "4": {
                            "description": "d",
                            "type": "string"
                          },
                          "5": {
                            "description": "g",
                            "type": "string"
                          },
                          "6": {
                            "description": "e",
                            "type": "string"
                          },
                          "7": {
                            "description": "I",
                            "type": "string"
                          },
                          "8": {
                            "description": "D",
                            "type": "string"
                          },
                          "9": {
                            "description": "s",
                            "type": "string"
                          },
                          "10": {
                            "description": ">",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "chimes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "0": {
                            "description": "<",
                            "type": "string"
                          },
                          "1": {
                            "description": "c",
                            "type": "string"
                          },
                          "2": {
                            "description": "h",
                            "type": "string"
                          },
                          "3": {
                            "description": "i",
                            "type": "string"
                          },
                          "4": {
                            "description": "m",
                            "type": "string"
                          },
                          "5": {
                            "description": "e",
                            "type": "string"
                          },
                          "6": {
                            "description": "I",
                            "type": "string"
                          },
                          "7": {
                            "description": "D",
                            "type": "string"
                          },
                          "8": {
                            "description": "s",
                            "type": "string"
                          },
                          "9": {
                            "description": ">",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/devices/capabilities": {
      "get": {
        "summary": "Get the capabilities for a device",
        "description": "The response body may contain capabilities for multiple device types.  e.g. lock and keypad for Unity devices with a keypad.",
        "parameters": [
          {
            "name": "hhID",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Host Hardware Identifier",
              "type": "string"
            }
          },
          {
            "name": "udID",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Universal Device Identifier",
              "type": "string"
            }
          },
          {
            "name": "hID",
            "in": "query",
            "required": false,
            "schema": {
              "description": "Host Identifier",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "lock": {
                      "type": "object",
                      "properties": {
                        "hostHardwareLockInfo": {
                          "type": "object",
                          "properties": {}
                        },
                        "hostLock": {
                          "type": "object",
                          "properties": {}
                        }
                      }
                    },
                    "doorbell": {
                      "type": "object",
                      "properties": {}
                    },
                    "connect": {
                      "type": "object",
                      "properties": {}
                    },
                    "keypad": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/devices/questionnaire/:questionnaireID": {
      "get": {
        "summary": "Get the questionnaire for a device version",
        "description": "Once we get to the final question/answer, instead of destination, there will be a type and value",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "firstQuestion": {
                      "description": "screenOne",
                      "type": "string"
                    },
                    "screenOne": {
                      "type": "object",
                      "properties": {
                        "titleText": {
                          "description": "Title of current screen",
                          "type": "string"
                        },
                        "backgroundImageName": {
                          "description": "Name of background image",
                          "type": "string"
                        },
                        "lottieAnimationName": {
                          "description": "Name of animation",
                          "type": "string"
                        },
                        "questionText": {
                          "description": "The question this screen asks",
                          "type": "string"
                        },
                        "answers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "text": {
                                "description": "Displayed first option",
                                "type": "string"
                              },
                              "destination": {
                                "description": "screenTwo",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "screenTwo": {
                      "type": "object",
                      "properties": {
                        "titleText": {
                          "description": "Title of current screen",
                          "type": "string"
                        },
                        "backgroundImageName": {
                          "description": "Name of background image",
                          "type": "string"
                        },
                        "lottieAnimationName": {
                          "description": "Name of animation",
                          "type": "string"
                        },
                        "questionText": {
                          "description": "The question this screen asks",
                          "type": "string"
                        },
                        "answers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "text": {
                                "description": "Displayed first option",
                                "type": "string"
                              },
                              "destination": {
                                "description": "screenThree",
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "questionnaireID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/chimes": {
      "post": {
        "summary": "Called by client apps when a user sets up a chime.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "doorbellID": {
                  "description": "ID of doorbell being associated with the chime.",
                  "type": "string"
                },
                "serialNumber": {
                  "description": "Serial number of the chime.",
                  "type": "string"
                },
                "name": {
                  "description": "Name of the chime",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "doorbellID": {
                      "description": "ID of doorbell being associated with the chime.",
                      "type": "string"
                    },
                    "serialNumber": {
                      "description": "Serial number of the chime.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Which version of the chime is being setup.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the chime",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/chimes/:chimeID": {
      "put": {
        "summary": "Called by client apps when a user renames a chime.",
        "description": "Return 404 not found if the doorbell is not setup.  Return 403 unauthorized if the calling user cannot manage the doorbell.  Return 404 not found if the chime is not setup.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "description": "New name of the chime",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "chimeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "get": {
        "summary": "Get information about a chime.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "chimeID": {
                      "description": "ID of the chime.",
                      "type": "string"
                    },
                    "serialNumber": {
                      "description": "Serial number of the chime.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Which version of the chime is being setup.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the chime",
                      "type": "string"
                    },
                    "firmware": {
                      "description": "Version of firmware (semver)",
                      "type": "string"
                    },
                    "settings": {
                      "type": "object",
                      "properties": {
                        "doorbellTune": {
                          "description": "<number> tune number [1,2,3,4] to play on doorbell press. 0 = off",
                          "type": "string"
                        },
                        "motionTune": {
                          "description": "<number> tune number [1,2,3,4] to play on motion event, 0 = off",
                          "type": "string"
                        },
                        "volume": {
                          "description": "<number> volume level (0 to 4 inclusive) ",
                          "type": "string"
                        },
                        "doorbellLed": {
                          "description": "<boolean>",
                          "type": "boolean"
                        },
                        "motionLed": {
                          "description": "<boolean>",
                          "type": "boolean"
                        },
                        "settings0": {
                          "description": "value0",
                          "type": "string"
                        },
                        "settings1": {
                          "description": "value1",
                          "type": "string"
                        },
                        "settingsN": {
                          "description": "valueN",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete chime.",
        "description": "Return 403 unauthorized if the calling user cannot manage the doorbell.  Return 404 not found if the chime is not setup.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/doorbells/:doorbellID/chimes/:chimeID/settings": {
      "put": {
        "summary": "Update Chime Settings",
        "description": "Must put the whole settings object.  Cannot update individual fields.",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "setting1": {
                  "description": "value of setting 1",
                  "type": "string"
                },
                "setting2": {
                  "description": "value of setting 2",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "chimeID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "get": {
        "summary": "Get Chime Settings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "doorbellTune": {
                      "description": "<number> tune number [1,2,3,4] to play on doorbell press. 0 = off",
                      "type": "string"
                    },
                    "motionTune": {
                      "description": "<number> tune number [1,2,3,4] to play on motion event, 0 = off",
                      "type": "string"
                    },
                    "volume": {
                      "description": "<number> volume level (0 to 4 inclusive) ",
                      "type": "string"
                    },
                    "doorbellLed": {
                      "description": "<boolean>",
                      "type": "boolean"
                    },
                    "motionLed": {
                      "description": "<boolean>",
                      "type": "boolean"
                    },
                    "setting1": {
                      "description": "value of setting 1",
                      "type": "string"
                    },
                    "setting2": {
                      "description": "value of setting 2",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/doorbells/:doorbellID/webrtcsignal": {
      "post": {
        "summary": "Sends sdp offer by proxying pubnub messages to the doorbell and awaits an sdp answer on that pubnub channel.  That sdp answer is returned to the caller.",
        "description": "Error Codes:\n403 NotAuthorized - user is not authorized to access doorbell\n404 ResourceNotFound - doorbellID not found\n408 RequestTimeoutError - Doorbell cannot wakeup || receives incorrectly formatted sdp offer || doorbell is not listening on the pubnub channel message was published to || doorbell is offline and has not yet been reported by server (15 minute window)\n409 ConflictError - doorbell has firmware that does not support webrtc || has not set the \"caps\" property with \"webrtc\"\n409 MissingParameter - missing body parameter \"offer\" or \"clientTransactionID\"\n422 UnprocessableEntityError - doorbell status is offline\n500 InternalServerError - other internal server error\n",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "timeoutMs": {
                  "description": "milliseconds to wait for a pubnub response, 30000 max, 5000 default",
                  "type": "string"
                },
                "offer": {
                  "description": "sdp offer string with \"\r\n\" newline delimeters",
                  "type": "string"
                },
                "clientTransactionID": {
                  "description": "identifier sent by the client to trace transaction",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "answer": {
                      "description": "sdp answer string",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/doorbells/:doorbellID/tcpwakeup": {
      "put": {
        "summary": "Wake a tcp connected device",
        "description": "Status Codes:\n200 OK - Device already online\n202 Accepted - Doorbell was in standby mode and is being woken up\n404 ResourceNotFound - doorbellID not found\n412 Precondition Failed - device not connected to tcp keep alive server || device is offline ||\nDoorbell does not support tcp keep alive || wakeup token not set || invalid doorbell status\n500 InternalServerError - other internal server error\n",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "doorbellID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/:userID": {
      "delete": {
        "summary": "Delete a user account.  The userID must match the one in the access token.",
        "description": "Status Codes:\n401 InvalidCredentialsError\n  - The userID does not match the one in the access token.\n  - The access token is invalid.\n  - The user is blacklisted.",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "userID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/brands/urls/:brand/:country/:language/:urlID": {
      "get": {
        "summary": "Get brand and locale specific URLs",
        "description": "Status Codes:\n301 - Success/redirect to URL400 - Invalid brand404 - Link not found",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "brand",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "country",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "language",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "urlID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    },
    "/users/:userID/orchestra-accesses": {
      "post": {
        "summary": "Add user to orchestra. The user is then linked and has a new property `orchestraCustomerId`",
        "description": "Error Codes:\n412 PreconditionFailedError - user already linked to orchestra\n500 InternalServerError - other internal server error",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "userID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Remove user to orchestra.  The userID must match the one in the access token.",
        "description": "Status Codes:\n401 InvalidCredentialsError\n  - The userID does not match the one in the access token.\n  - The access token is invalid.\n  - The user is blacklisted.\n412 PreconditionFailedError - user not linked to orchestra",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/orchestra-accesses": {
      "get": {
        "summary": "Get user accesses and credentials to orchestra",
        "description": "Status Codes:\n401 InvalidCredentialsError\n  - The userID does not match the one in the access token.\n  - The access token is invalid.\n  - The user is blacklisted.\n412 PreconditionFailedError - user not linked to orchestra",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/orchestra-accesses/:accessID": {
      "put": {
        "summary": "Update access to orchestra",
        "description": "Status Codes:\n400 BadRequestError - params and body do not match schema\n401 InvalidCredentialsError\n  - The userID does not match the one in the access token.\n  - The access token is invalid.\n  - The user is blacklisted.\n403 PreconditionFailedError - user does not owns access\n404 ResourceNotFoundError - access not found",
        "requestBody": {
          "content": {
            "schema": {
              "type": "object",
              "properties": {
                "granted": {
                  "description": "boolean to respond to an access request",
                  "type": "boolean"
                },
                "lockID": {
                  "description": "lockID associated with the access request. Required if granted is true.",
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "accessID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ],
      "delete": {
        "summary": "Delete access to orchestra with it's credentials",
        "description": "Status Codes:\n400 BadRequestError - params do not match schema\n401 InvalidCredentialsError\n  - The userID does not match the one in the access token.\n  - The access token is invalid.\n  - The user is blacklisted.\n403 PreconditionFailedError - user does not owns access\n404 ResourceNotFoundError - access not found",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/orchestra-accesses/:accessID/credentials/:credentialID": {
      "delete": {
        "summary": "Delete credential to orchestra",
        "description": "Status Codes:\n400 BadRequestError - params do not match schema\n401 InvalidCredentialsError\n  - The userID does not match the one in the access token.\n  - The access token is invalid.\n  - The user is blacklisted.\n403 NotAuthorizedError\n  - user does not owns access\n  - credential does not belongs to the access\n404 ResourceNotFoundError\n  - access not found\n  - credential not found",
        "responses": {
          "200": {
            "description": "unknown",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "accessID",
          "in": "path",
          "required": true,
          "schema": {}
        },
        {
          "name": "credentialID",
          "in": "path",
          "required": true,
          "schema": {}
        }
      ]
    }
  }
}